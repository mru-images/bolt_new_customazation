"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/page.tsx":
/*!**********************!*\
  !*** ./app/page.tsx ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ MusicPlayerApp; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _components_AddToPlaylistModal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/components/AddToPlaylistModal */ \"(app-pages-browser)/./components/AddToPlaylistModal.tsx\");\n/* harmony import */ var _components_AuthWrapper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/components/AuthWrapper */ \"(app-pages-browser)/./components/AuthWrapper.tsx\");\n/* harmony import */ var _components_CreatePlaylistModal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/CreatePlaylistModal */ \"(app-pages-browser)/./components/CreatePlaylistModal.tsx\");\n/* harmony import */ var _components_HomePage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/components/HomePage */ \"(app-pages-browser)/./components/HomePage.tsx\");\n/* harmony import */ var _components_LikedSongsPage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components/LikedSongsPage */ \"(app-pages-browser)/./components/LikedSongsPage.tsx\");\n/* harmony import */ var _components_MaximizedPlayer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/components/MaximizedPlayer */ \"(app-pages-browser)/./components/MaximizedPlayer.tsx\");\n/* harmony import */ var _components_MinimizedPlayer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/components/MinimizedPlayer */ \"(app-pages-browser)/./components/MinimizedPlayer.tsx\");\n/* harmony import */ var _components_PlaylistsPage__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/components/PlaylistsPage */ \"(app-pages-browser)/./components/PlaylistsPage.tsx\");\n/* harmony import */ var _components_SearchPage__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/components/SearchPage */ \"(app-pages-browser)/./components/SearchPage.tsx\");\n/* harmony import */ var _components_SettingsPage__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/components/SettingsPage */ \"(app-pages-browser)/./components/SettingsPage.tsx\");\n/* harmony import */ var _components_SleepTimerModal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @/components/SleepTimerModal */ \"(app-pages-browser)/./components/SleepTimerModal.tsx\");\n/* harmony import */ var _components_ThemeContext__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @/components/ThemeContext */ \"(app-pages-browser)/./components/ThemeContext.tsx\");\n/* harmony import */ var _hooks_useAuth__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @/hooks/useAuth */ \"(app-pages-browser)/./hooks/useAuth.ts\");\n/* harmony import */ var _hooks_useQueue__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @/hooks/useQueue */ \"(app-pages-browser)/./hooks/useQueue.ts\");\n/* harmony import */ var _hooks_useSleepTimer__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @/hooks/useSleepTimer */ \"(app-pages-browser)/./hooks/useSleepTimer.ts\");\n/* harmony import */ var _hooks_useSupabaseData__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @/hooks/useSupabaseData */ \"(app-pages-browser)/./hooks/useSupabaseData.ts\");\n/* harmony import */ var _barrel_optimize_names_Home_Search_Settings_lucide_react__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! __barrel_optimize__?names=Home,Search,Settings!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/home.js\");\n/* harmony import */ var _barrel_optimize_names_Home_Search_Settings_lucide_react__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! __barrel_optimize__?names=Home,Search,Settings!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/search.js\");\n/* harmony import */ var _barrel_optimize_names_Home_Search_Settings_lucide_react__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! __barrel_optimize__?names=Home,Search,Settings!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/settings.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! react-hot-toast */ \"(app-pages-browser)/./node_modules/react-hot-toast/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction MusicPlayerContent() {\n    _s();\n    const { user } = (0,_hooks_useAuth__WEBPACK_IMPORTED_MODULE_13__.useAuth)();\n    const { songs, personalizedSongs, playlists, likedSongs, recentlyPlayedSongs, lastPlayedSong, loading, toggleLike, createPlaylist, deletePlaylist, renamePlaylist, addSongToPlaylist, removeSongFromPlaylist, recordListeningHistory, stopCurrentSongTracking, getPersonalizedSongs, getSmartPersonalizedSongs } = (0,_hooks_useSupabaseData__WEBPACK_IMPORTED_MODULE_16__.useSupabaseData)(user);\n    const { queue, addToQueue, removeFromQueue, getNextSongFromQueue, clearQueue, hasQueue } = (0,_hooks_useQueue__WEBPACK_IMPORTED_MODULE_14__.useQueue)();\n    const [activeTab, setActiveTab] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(\"home\");\n    const [currentPage, setCurrentPage] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(\"main\");\n    const [currentSong, setCurrentSong] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(null);\n    const [isPlaying, setIsPlaying] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(false);\n    const [isPlayerMaximized, setIsPlayerMaximized] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(false);\n    const [showCreatePlaylistModal, setShowCreatePlaylistModal] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(false);\n    const [showAddToPlaylistModal, setShowAddToPlaylistModal] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(false);\n    const [showSleepTimerModal, setShowSleepTimerModal] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(false);\n    const [selectedSongForPlaylist, setSelectedSongForPlaylist] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(null);\n    const [hasSetLastPlayedSong, setHasSetLastPlayedSong] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(false);\n    const [lastPlayedSongDismissed, setLastPlayedSongDismissed] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(false);\n    const { isDarkMode, toggleTheme } = (0,_components_ThemeContext__WEBPACK_IMPORTED_MODULE_12__.useTheme)();\n    const [displayCount, setDisplayCount] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(15);\n    const [imageUrls, setImageUrls] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)({});\n    const [audioUrl, setAudioUrl] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(null);\n    const audioRef = (0,react__WEBPACK_IMPORTED_MODULE_17__.useRef)(null);\n    const [currentTime, setCurrentTime] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(0);\n    const [duration, setDuration] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(0);\n    const [volume, setVolume] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(1); // default 75%\n    const [isSeeking, setIsSeeking] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(false);\n    const [pendingSeekTime, setPendingSeekTime] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(null);\n    const [isExternallySeeking, setIsExternallySeeking] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(false);\n    const [recommendedQueue, setRecommendedQueue] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)([]);\n    const [playedSongs, setPlayedSongs] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(new Set());\n    const [personalizedList, setPersonalizedList] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)([]);\n    const [currentSongIndex, setCurrentSongIndex] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(0);\n    const [listenedSongs, setListenedSongs] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(new Set());\n    const [isFetchingMore, setIsFetchingMore] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(false);\n    // Smart recommendation system state\n    const [currentBatchListenedSongs, setCurrentBatchListenedSongs] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)([]);\n    const [songStartTime, setSongStartTime] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(null);\n    const [batchStartIndex, setBatchStartIndex] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(0);\n    // Shuffle and repeat state\n    const [isShuffleEnabled, setIsShuffleEnabled] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(true); // Shuffle on by default\n    const [repeatMode, setRepeatMode] = (0,react__WEBPACK_IMPORTED_MODULE_17__.useState)(\"off\");\n    // Sleep timer\n    const { sleepTimer, remainingTime, startTimer, cancelTimer, triggerAfterSongTimer, isActive: isSleepTimerActive } = (0,_hooks_useSleepTimer__WEBPACK_IMPORTED_MODULE_15__.useSleepTimer)();\n    const loadMoreSongs = ()=>{\n        setDisplayCount((prev)=>prev + 15);\n    };\n    const displayedSongs = songs.slice(0, displayCount);\n    (0,react__WEBPACK_IMPORTED_MODULE_17__.useEffect)(()=>{\n        const loadAudio = async ()=>{\n            if (currentSong === null || currentSong === void 0 ? void 0 : currentSong.file_id) {\n                const url = \"/api/audio-proxy?fileid=\".concat(currentSong.file_id);\n                setAudioUrl(url);\n                setDuration(0);\n                setCurrentTime(0);\n                setPendingSeekTime(null);\n            }\n        };\n        loadAudio();\n    }, [\n        currentSong === null || currentSong === void 0 ? void 0 : currentSong.file_id\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_17__.useEffect)(()=>{\n        if (audioRef.current) {\n            audioRef.current.volume = volume;\n        }\n    }, [\n        volume\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_17__.useEffect)(()=>{\n        const audio = audioRef.current;\n        if (!audio) return;\n        if (!isNaN(audio.duration) && isPlaying) {\n            // Duration is valid, safe to play\n            audio.play().catch((e)=>{\n                console.error(\"Playback error:\", e);\n            });\n        } else if (!isPlaying) {\n            audio.pause();\n        }\n    }, [\n        isPlaying\n    ]);\n    // Load images for currently displayed songs\n    (0,react__WEBPACK_IMPORTED_MODULE_17__.useEffect)(()=>{\n        const fetchImages = async ()=>{\n            const newUrls = {};\n            // Songs from the main feed\n            const songsToLoad = songs.slice(0, displayCount);\n            for (const song of songsToLoad){\n                if (!imageUrls[song.id]) {\n                    newUrls[song.id] = \"/api/image-proxy?fileid=\".concat(song.img_id);\n                }\n            }\n            // Songs from playlists\n            for (const playlist of playlists){\n                for (const song of playlist.songs){\n                    if (!imageUrls[song.id]) {\n                        newUrls[song.id] = \"/api/image-proxy?fileid=\".concat(song.img_id);\n                    }\n                }\n            }\n            // Liked songs\n            for (const song of likedSongs){\n                if (!imageUrls[song.id]) {\n                    newUrls[song.id] = \"/api/image-proxy?fileid=\".concat(song.img_id);\n                }\n            }\n            // Recently played songs\n            for (const song of recentlyPlayedSongs){\n                if (!imageUrls[song.id]) {\n                    newUrls[song.id] = \"/api/image-proxy?fileid=\".concat(song.img_id);\n                }\n            }\n            // Apply if new URLs found\n            if (Object.keys(newUrls).length > 0) {\n                setImageUrls((prev)=>({\n                        ...prev,\n                        ...newUrls\n                    }));\n            }\n        };\n        fetchImages();\n    }, [\n        displayCount,\n        songs,\n        playlists,\n        likedSongs,\n        recentlyPlayedSongs\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_17__.useEffect)(()=>{\n        console.log(\"\\uD83C\\uDFB5 personalizedList updated:\", personalizedList);\n    }, [\n        personalizedList\n    ]);\n    // Set last played song as current song when data loads (only once and if not dismissed)\n    (0,react__WEBPACK_IMPORTED_MODULE_17__.useEffect)(()=>{\n        const loadLastPlayedImage = async ()=>{\n            if (user && lastPlayedSong && !hasSetLastPlayedSong && !lastPlayedSongDismissed) {\n                try {\n                    console.log(\"\\uD83C\\uDFB5 Loading initial personalized songs for last played song\");\n                    const initialRecs = await getPersonalizedSongs(user.id, lastPlayedSong, listenedSongs);\n                    const filtered = initialRecs.filter((song)=>!playedSongs.has(song.file_id.toString()));\n                    const newPersonalizedList = [\n                        lastPlayedSong,\n                        ...filtered.slice(0, 4)\n                    ];\n                    setPersonalizedList(newPersonalizedList);\n                    console.log(\"✅ Initial personalized list set:\", newPersonalizedList.length, \"songs\");\n                } catch (error) {\n                    console.error(\"❌ Error loading initial personalized songs:\", error);\n                    setPersonalizedList([\n                        lastPlayedSong\n                    ]);\n                }\n                setCurrentSong(lastPlayedSong);\n                setHasSetLastPlayedSong(true);\n                // Add to listened songs and log\n                setListenedSongs((prev)=>{\n                    const newSet = new Set(prev);\n                    newSet.add(lastPlayedSong.file_id.toString());\n                    console.log(\"\\uD83C\\uDFB5 Listened Songs List:\", Array.from(newSet));\n                    return newSet;\n                });\n                if (!imageUrls[lastPlayedSong.img_id]) {\n                    const url = \"/api/image-proxy?fileid=\".concat(lastPlayedSong.img_id);\n                    setImageUrls((prev)=>({\n                            ...prev,\n                            [lastPlayedSong.img_id]: url\n                        }));\n                }\n            }\n        };\n        loadLastPlayedImage();\n    }, [\n        lastPlayedSong,\n        hasSetLastPlayedSong,\n        lastPlayedSongDismissed,\n        user,\n        getPersonalizedSongs\n    ]);\n    const handleSongPlay = async (song)=>{\n        // Record if previous song was listened to (>20 seconds)\n        if (currentSong && songStartTime) {\n            const listenDuration = (new Date().getTime() - songStartTime.getTime()) / 1000;\n            if (listenDuration > 20) {\n                console.log('✅ User listened to \"'.concat(currentSong.name, '\" for ').concat(listenDuration.toFixed(1), \" seconds\"));\n                setCurrentBatchListenedSongs((prev)=>{\n                    const exists = prev.some((s)=>s.file_id === currentSong.file_id);\n                    if (!exists) {\n                        const updated = [\n                            ...prev,\n                            currentSong\n                        ];\n                        console.log(\"\\uD83C\\uDFB5 Current batch listened songs:\", updated.map((s)=>s.name));\n                        return updated;\n                    }\n                    return prev;\n                });\n            } else {\n                console.log('⏭️ User skipped \"'.concat(currentSong.name, '\" after ').concat(listenDuration.toFixed(1), \" seconds\"));\n            }\n        }\n        setCurrentSong(song);\n        setIsPlaying(true);\n        setLastPlayedSongDismissed(false);\n        recordListeningHistory(song.id);\n        setSongStartTime(new Date()); // Track when this song started\n        // Add to listened songs and log\n        setListenedSongs((prev)=>{\n            const newSet = new Set(prev);\n            newSet.add(song.file_id.toString());\n            console.log(\"\\uD83C\\uDFB5 Listened Songs List:\", Array.from(newSet));\n            return newSet;\n        });\n        setPlayedSongs((prev)=>{\n            const updated = new Set(prev);\n            updated.add(song.file_id.toString());\n            return updated;\n        });\n        if (user) {\n            try {\n                console.log(\"\\uD83C\\uDFB5 Fetching personalized songs for:\", song.name);\n                const recs = await getPersonalizedSongs(user.id, song, listenedSongs);\n                const filtered = recs.filter((s)=>!playedSongs.has(s.file_id.toString()));\n                const newPersonalizedList = [\n                    song,\n                    ...filtered.slice(0, 4)\n                ];\n                setPersonalizedList(newPersonalizedList);\n                setCurrentSongIndex(0);\n                setBatchStartIndex(0);\n                setCurrentBatchListenedSongs([]); // Reset batch for new song selection\n                console.log(\"✅ New personalized list set:\", newPersonalizedList.length, \"songs\");\n            } catch (error) {\n                console.error(\"❌ Error fetching personalized songs:\", error);\n                setPersonalizedList([\n                    song\n                ]);\n                setCurrentSongIndex(0);\n                setBatchStartIndex(0);\n                setCurrentBatchListenedSongs([]);\n            }\n        }\n    };\n    const handleAddToQueue = (song)=>{\n        addToQueue(song);\n        react_hot_toast__WEBPACK_IMPORTED_MODULE_18__.toast.success('Added \"'.concat(song.name, '\" to queue'));\n    };\n    const togglePlay = ()=>{\n        setIsPlaying(!isPlaying);\n    };\n    const togglePlayerSize = ()=>{\n        setIsPlayerMaximized(!isPlayerMaximized);\n    };\n    const closePlayer = async ()=>{\n        // Stop tracking current song before closing\n        await stopCurrentSongTracking();\n        setCurrentSong(null);\n        setIsPlaying(false);\n        setIsPlayerMaximized(false);\n        // Mark last played song as dismissed so it won't auto-load again\n        setLastPlayedSongDismissed(true);\n    };\n    const handleToggleLike = (songId)=>{\n        toggleLike(songId);\n        // Update current song state if it's the one being liked/unliked\n        if (currentSong && currentSong.id === songId) {\n            setCurrentSong((prev)=>prev ? {\n                    ...prev,\n                    isLiked: !prev.isLiked\n                } : null);\n        }\n    };\n    const handlePrevious = ()=>{\n        // Record if current song was listened to before going to previous\n        if (currentSong && songStartTime) {\n            const listenDuration = (new Date().getTime() - songStartTime.getTime()) / 1000;\n            if (listenDuration > 20) {\n                console.log('✅ User listened to \"'.concat(currentSong.name, '\" for ').concat(listenDuration.toFixed(1), \" seconds\"));\n                setCurrentBatchListenedSongs((prev)=>{\n                    const exists = prev.some((s)=>s.file_id === currentSong.file_id);\n                    if (!exists) {\n                        const updated = [\n                            ...prev,\n                            currentSong\n                        ];\n                        console.log(\"\\uD83C\\uDFB5 Current batch listened songs:\", updated.map((s)=>s.name));\n                        return updated;\n                    }\n                    return prev;\n                });\n            }\n        }\n        if (!currentSong) return;\n        // Check if there's a previous song in the personalized list\n        if (currentSongIndex > 0) {\n            const prevIndex = currentSongIndex - 1;\n            const prevSong = personalizedList[prevIndex];\n            if (prevSong) {\n                setCurrentSong(prevSong);\n                setCurrentSongIndex(prevIndex);\n                setIsPlaying(true);\n                setLastPlayedSongDismissed(false);\n                recordListeningHistory(prevSong.id);\n                setSongStartTime(new Date());\n                // Add to listened songs and log\n                setListenedSongs((prev)=>{\n                    const newSet = new Set(prev);\n                    newSet.add(prevSong.file_id.toString());\n                    console.log(\"\\uD83C\\uDFB5 Listened Songs List:\", Array.from(newSet));\n                    return newSet;\n                });\n                setPlayedSongs((prev)=>{\n                    const updated = new Set(prev);\n                    updated.add(prevSong.file_id.toString());\n                    return updated;\n                });\n                // Preload image\n                if (!imageUrls[prevSong.img_id]) {\n                    const newUrl = \"/api/image-proxy?fileid=\".concat(prevSong.img_id);\n                    setImageUrls((prev)=>({\n                            ...prev,\n                            [prevSong.img_id]: newUrl\n                        }));\n                }\n            }\n        } else {\n            // If at the beginning, just restart current song\n            setCurrentTime(0);\n            setIsPlaying(true);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_17__.useEffect)(()=>{\n        if (!currentSong) return;\n        const currentIndex = songs.findIndex((song)=>song.id === currentSong.id);\n        const nextIndex = currentIndex < songs.length - 1 ? currentIndex + 1 : 0;\n        const nextSong = songs[nextIndex];\n        // Preload next song image if not in cache\n        if (nextSong && !imageUrls[nextSong.img_id]) {\n            const newUrl = \"/api/image-proxy?fileid=\".concat(nextSong.img_id);\n            setImageUrls((prev)=>({\n                    ...prev,\n                    [nextSong.img_id]: newUrl\n                }));\n        }\n    }, [\n        currentSong,\n        songs\n    ]);\n    const handleLoadedMetadata = async ()=>{\n        const audio = audioRef.current;\n        if (!audio) return;\n        const loadedDuration = audio.duration;\n        if (!isNaN(loadedDuration) && isFinite(loadedDuration)) {\n            setDuration(loadedDuration);\n            if (pendingSeekTime !== null) {\n                audio.currentTime = pendingSeekTime;\n                setCurrentTime(pendingSeekTime);\n                setPendingSeekTime(null);\n            } else {\n                setCurrentTime(audio.currentTime);\n            }\n            try {\n                if (isPlaying) {\n                    await audio.play();\n                }\n            } catch (err) {\n                console.error(\"Auto-play error after metadata load:\", err);\n            }\n        } else {\n            // Retry metadata read\n            setTimeout(handleLoadedMetadata, 100);\n        }\n    };\n    const handleNext = async ()=>{\n        // Record if current song was listened to before going to next\n        if (currentSong && songStartTime) {\n            const listenDuration = (new Date().getTime() - songStartTime.getTime()) / 1000;\n            if (listenDuration > 20) {\n                console.log('✅ User listened to \"'.concat(currentSong.name, '\" for ').concat(listenDuration.toFixed(1), \" seconds\"));\n                setCurrentBatchListenedSongs((prev)=>{\n                    const exists = prev.some((s)=>s.file_id === currentSong.file_id);\n                    if (!exists) {\n                        const updated = [\n                            ...prev,\n                            currentSong\n                        ];\n                        console.log(\"\\uD83C\\uDFB5 Current batch listened songs:\", updated.map((s)=>s.name));\n                        return updated;\n                    }\n                    return prev;\n                });\n            } else {\n                console.log('⏭️ User skipped \"'.concat(currentSong.name, '\" after ').concat(listenDuration.toFixed(1), \" seconds\"));\n            }\n        }\n        if (!currentSong) return;\n        // Check if there's a song in the queue first\n        const nextQueueSong = getNextSongFromQueue();\n        if (nextQueueSong) {\n            setCurrentSong(nextQueueSong);\n            setIsPlaying(true);\n            setLastPlayedSongDismissed(false);\n            recordListeningHistory(nextQueueSong.id);\n            setSongStartTime(new Date());\n            // Add to listened songs and log\n            setListenedSongs((prev)=>{\n                const newSet = new Set(prev);\n                newSet.add(nextQueueSong.file_id.toString());\n                console.log(\"\\uD83C\\uDFB5 Listened Songs List:\", Array.from(newSet));\n                return newSet;\n            });\n            // Update personalized list with the queue song\n            if (user) {\n                const recs = await getPersonalizedSongs(user.id, nextQueueSong, listenedSongs);\n                const filtered = recs.filter((s)=>!playedSongs.has(String(s.file_id)));\n                const newPersonalizedList = [\n                    nextQueueSong,\n                    ...filtered.slice(0, 4)\n                ];\n                setPersonalizedList(newPersonalizedList);\n                setCurrentSongIndex(0);\n            }\n            // Preload image\n            if (!imageUrls[nextQueueSong.img_id]) {\n                const newUrl = \"/api/image-proxy?fileid=\".concat(nextQueueSong.img_id);\n                setImageUrls((prev)=>({\n                        ...prev,\n                        [nextQueueSong.img_id]: newUrl\n                    }));\n            }\n            return;\n        }\n        // Check if we're at the second-to-last song and need to fetch smart recommendations\n        if (currentSongIndex === personalizedList.length - 2 && !isFetchingMore && user && currentSong) {\n            console.log(\"\\uD83E\\uDDE0 At second-to-last song, checking for smart recommendations...\");\n            setIsFetchingMore(true);\n            try {\n                let newRecs = [];\n                // If we have songs that user actually listened to in current batch, use smart recommendations\n                if (currentBatchListenedSongs.length > 0) {\n                    console.log(\"\\uD83E\\uDDE0 Using smart recommendations based on listened songs\");\n                    newRecs = await getSmartPersonalizedSongs(user.id, currentBatchListenedSongs, new Set([\n                        ...Array.from(listenedSongs),\n                        ...personalizedList.map((s)=>s.file_id.toString())\n                    ]));\n                } else {\n                    console.log(\"\\uD83C\\uDFB5 No listened songs in batch, using regular recommendations\");\n                    newRecs = await getPersonalizedSongs(user.id, currentSong, listenedSongs);\n                }\n                const filtered = newRecs.filter((song)=>!playedSongs.has(song.file_id.toString()) && !listenedSongs.has(song.file_id.toString()) && !personalizedList.some((existing)=>existing.file_id === song.file_id));\n                if (filtered.length > 0) {\n                    setPersonalizedList((prev)=>[\n                            ...prev,\n                            ...filtered.slice(0, 5)\n                        ]);\n                    console.log(\"✅ Added\", filtered.slice(0, 5).length, \"smart recommendations to personalized list\");\n                }\n            } catch (error) {\n                console.error(\"❌ Error fetching smart recommendations:\", error);\n            } finally{\n                setIsFetchingMore(false);\n            }\n        }\n        // If no queue, proceed with personalized list\n        const nextIndex = currentSongIndex + 1;\n        if (nextIndex < personalizedList.length) {\n            const nextSong = personalizedList[nextIndex];\n            setCurrentSong(nextSong);\n            setCurrentSongIndex(nextIndex);\n            setIsPlaying(true);\n            setLastPlayedSongDismissed(false);\n            recordListeningHistory(nextSong.id);\n            setSongStartTime(new Date());\n            // Add to listened songs and log\n            setListenedSongs((prev)=>{\n                const newSet = new Set(prev);\n                newSet.add(nextSong.file_id.toString());\n                console.log(\"\\uD83C\\uDFB5 Listened Songs List:\", Array.from(newSet));\n                return newSet;\n            });\n            setPlayedSongs((prev)=>{\n                const updated = new Set(prev);\n                updated.add(String(nextSong.file_id));\n                return updated;\n            });\n            // Preload image\n            if (!imageUrls[nextSong.img_id]) {\n                const newUrl = \"/api/image-proxy?fileid=\".concat(nextSong.img_id);\n                setImageUrls((prev)=>({\n                        ...prev,\n                        [nextSong.img_id]: newUrl\n                    }));\n            }\n        } else {\n            // If we've reached the end of personalized list, get new smart recommendations\n            if (user && currentSong) {\n                try {\n                    console.log(\"\\uD83E\\uDDE0 Reached end of list, fetching new smart recommendations\");\n                    let newRecs = [];\n                    // Use smart recommendations if we have listened songs in current batch\n                    if (currentBatchListenedSongs.length > 0) {\n                        console.log(\"\\uD83E\\uDDE0 Using smart recommendations for new batch\");\n                        newRecs = await getSmartPersonalizedSongs(user.id, currentBatchListenedSongs, listenedSongs);\n                    } else {\n                        console.log(\"\\uD83C\\uDFB5 Using regular recommendations for new batch\");\n                        newRecs = await getPersonalizedSongs(user.id, currentSong, listenedSongs);\n                    }\n                    const filtered = newRecs.filter((song)=>!playedSongs.has(song.file_id.toString()) && !listenedSongs.has(song.file_id.toString()));\n                    if (filtered.length > 0) {\n                        const nextSong = filtered[0];\n                        setCurrentSong(nextSong);\n                        setIsPlaying(true);\n                        setLastPlayedSongDismissed(false);\n                        recordListeningHistory(nextSong.id);\n                        setSongStartTime(new Date());\n                        // Add to listened songs and log\n                        setListenedSongs((prev)=>{\n                            const newSet = new Set(prev);\n                            newSet.add(nextSong.file_id.toString());\n                            console.log(\"\\uD83C\\uDFB5 Listened Songs List:\", Array.from(newSet));\n                            return newSet;\n                        });\n                        // Create new personalized list starting with this song\n                        const newPersonalizedList = [\n                            nextSong,\n                            ...filtered.slice(1, 5)\n                        ];\n                        setPersonalizedList(newPersonalizedList);\n                        setCurrentSongIndex(0);\n                        setBatchStartIndex(0);\n                        setCurrentBatchListenedSongs([]); // Reset batch for new recommendations\n                        setPlayedSongs((prev)=>{\n                            const updated = new Set(prev);\n                            updated.add(nextSong.file_id.toString());\n                            return updated;\n                        });\n                        // Preload image\n                        if (!imageUrls[nextSong.img_id]) {\n                            const newUrl = \"/api/image-proxy?fileid=\".concat(nextSong.img_id);\n                            setImageUrls((prev)=>({\n                                    ...prev,\n                                    [nextSong.img_id]: newUrl\n                                }));\n                        }\n                        console.log(\"✅ New smart recommendations loaded:\", newPersonalizedList.length, \"songs\");\n                    } else {\n                        console.warn(\"⚠️ No more smart recommendations available\");\n                    }\n                } catch (error) {\n                    console.error(\"❌ Error fetching new smart recommendations:\", error);\n                }\n            }\n        }\n    };\n    const formatNumber = (num)=>{\n        if (num >= 1000000) {\n            return (num / 1000000).toFixed(1) + \"M\";\n        } else if (num >= 1000) {\n            return (num / 1000).toFixed(1) + \"K\";\n        }\n        return num.toString();\n    };\n    const handleAddToPlaylist = (song)=>{\n        setSelectedSongForPlaylist(song);\n        setShowAddToPlaylistModal(true);\n    };\n    const handleSongEnd = async ()=>{\n        // Check if sleep timer is set to \"after-song\" and trigger it\n        if (sleepTimer === \"after-song\") {\n            triggerAfterSongTimer();\n            return;\n        }\n        // Record if song was listened to completely (assume >20 seconds if it ended naturally)\n        if (currentSong && songStartTime) {\n            const listenDuration = (new Date().getTime() - songStartTime.getTime()) / 1000;\n            console.log('\\uD83C\\uDFB5 Song \"'.concat(currentSong.name, '\" ended after ').concat(listenDuration.toFixed(1), \" seconds\"));\n            if (listenDuration > 20) {\n                setCurrentBatchListenedSongs((prev)=>{\n                    const exists = prev.some((s)=>s.file_id === currentSong.file_id);\n                    if (!exists) {\n                        const updated = [\n                            ...prev,\n                            currentSong\n                        ];\n                        console.log(\"\\uD83C\\uDFB5 Current batch listened songs:\", updated.map((s)=>s.name));\n                        return updated;\n                    }\n                    return prev;\n                });\n            }\n        }\n        // Handle repeat modes\n        if (repeatMode === \"once\" || repeatMode === \"infinite\") {\n            // Restart the current song\n            setCurrentTime(0);\n            setIsPlaying(true);\n            setSongStartTime(new Date());\n            // If repeat once, turn off repeat after playing once\n            if (repeatMode === \"once\") {\n                setRepeatMode(\"off\");\n            }\n            return;\n        }\n        // When a song ends, automatically play the next one\n        await handleNext();\n    };\n    const handleSleepTimerSet = (minutes)=>{\n        if (minutes === null) {\n            cancelTimer();\n        } else {\n            startTimer(minutes, ()=>{\n                setIsPlaying(false);\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_18__.toast.success(\"Sleep timer ended - music stopped\");\n            });\n            if (typeof minutes === \"number\") {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_18__.toast.success(\"Sleep timer set for \".concat(minutes, \" minutes\"));\n            } else {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_18__.toast.success(\"Sleep timer set to stop after current song\");\n            }\n        }\n    };\n    const renderContent = ()=>{\n        if (currentPage === \"playlists\") {\n            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_PlaylistsPage__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                playlists: playlists,\n                onBack: ()=>setCurrentPage(\"main\"),\n                onSongPlay: handleSongPlay,\n                onAddToQueue: handleAddToQueue,\n                onCreatePlaylist: ()=>setShowCreatePlaylistModal(true),\n                onDeletePlaylist: deletePlaylist,\n                onRenamePlaylist: renamePlaylist,\n                onRemoveSongFromPlaylist: removeSongFromPlaylist,\n                imageUrls: imageUrls,\n                clearQueue: clearQueue\n            }, void 0, false, {\n                fileName: \"/home/project/app/page.tsx\",\n                lineNumber: 718,\n                columnNumber: 9\n            }, this);\n        }\n        if (currentPage === \"liked\") {\n            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_LikedSongsPage__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                songs: likedSongs,\n                onBack: ()=>setCurrentPage(\"main\"),\n                onSongPlay: handleSongPlay,\n                onAddToQueue: handleAddToQueue,\n                imageUrls: imageUrls,\n                clearQueue: clearQueue\n            }, void 0, false, {\n                fileName: \"/home/project/app/page.tsx\",\n                lineNumber: 734,\n                columnNumber: 14\n            }, this);\n        }\n        switch(activeTab){\n            case \"home\":\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_HomePage__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                    songs: displayedSongs,\n                    personalizedSongs: personalizedSongs,\n                    recentlyPlayedSongs: recentlyPlayedSongs,\n                    onSongPlay: handleSongPlay,\n                    formatNumber: formatNumber,\n                    onAddToPlaylist: handleAddToPlaylist,\n                    onAddToQueue: handleAddToQueue,\n                    imageUrls: imageUrls,\n                    onLoadMore: loadMoreSongs,\n                    hasMoreSongs: displayCount < songs.length\n                }, void 0, false, {\n                    fileName: \"/home/project/app/page.tsx\",\n                    lineNumber: 739,\n                    columnNumber: 16\n                }, this);\n            case \"search\":\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_SearchPage__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                    songs: songs,\n                    onSongPlay: handleSongPlay,\n                    formatNumber: formatNumber,\n                    onAddToPlaylist: handleAddToPlaylist,\n                    onAddToQueue: handleAddToQueue,\n                    imageUrls: imageUrls,\n                    setImageUrls: setImageUrls\n                }, void 0, false, {\n                    fileName: \"/home/project/app/page.tsx\",\n                    lineNumber: 752,\n                    columnNumber: 16\n                }, this);\n            case \"settings\":\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_SettingsPage__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                    onPlaylistsClick: ()=>setCurrentPage(\"playlists\"),\n                    onLikedClick: ()=>setCurrentPage(\"liked\")\n                }, void 0, false, {\n                    fileName: \"/home/project/app/page.tsx\",\n                    lineNumber: 762,\n                    columnNumber: 16\n                }, this);\n            default:\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_HomePage__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                    songs: displayedSongs,\n                    personalizedSongs: personalizedSongs,\n                    recentlyPlayedSongs: recentlyPlayedSongs,\n                    onSongPlay: handleSongPlay,\n                    formatNumber: formatNumber,\n                    onAddToPlaylist: handleAddToPlaylist,\n                    onAddToQueue: handleAddToQueue,\n                    imageUrls: imageUrls,\n                    onLoadMore: loadMoreSongs,\n                    hasMoreSongs: displayCount < songs.length\n                }, void 0, false, {\n                    fileName: \"/home/project/app/page.tsx\",\n                    lineNumber: 764,\n                    columnNumber: 16\n                }, this);\n        }\n    };\n    const themeClasses = isDarkMode ? \"bg-gray-900 text-white\" : \"bg-gray-50 text-gray-900\";\n    const setCurrentTimeState = setCurrentTime;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"min-h-screen \".concat(themeClasses, \" relative overflow-hidden\"),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"transition-all duration-300 \".concat(currentSong ? \"pb-36\" : \"pb-20\"),\n                children: renderContent()\n            }, void 0, false, {\n                fileName: \"/home/project/app/page.tsx\",\n                lineNumber: 788,\n                columnNumber: 9\n            }, this),\n            currentPage === \"main\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"fixed bottom-0 left-0 right-0 \".concat(isDarkMode ? \"bg-gray-800 border-gray-700\" : \"bg-white border-gray-200\", \" border-t z-30\"),\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex items-center justify-around py-3\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: ()=>setActiveTab(\"home\"),\n                            className: \"flex flex-col items-center space-y-1 p-2 transition-colors \".concat(activeTab === \"home\" ? \"text-purple-400\" : isDarkMode ? \"text-gray-400\" : \"text-gray-600\"),\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Home_Search_Settings_lucide_react__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n                                    size: 24\n                                }, void 0, false, {\n                                    fileName: \"/home/project/app/page.tsx\",\n                                    lineNumber: 802,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: \"text-xs\",\n                                    children: \"Home\"\n                                }, void 0, false, {\n                                    fileName: \"/home/project/app/page.tsx\",\n                                    lineNumber: 803,\n                                    columnNumber: 17\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/home/project/app/page.tsx\",\n                            lineNumber: 796,\n                            columnNumber: 15\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: ()=>setActiveTab(\"search\"),\n                            className: \"flex flex-col items-center space-y-1 p-2 transition-colors \".concat(activeTab === \"search\" ? \"text-purple-400\" : isDarkMode ? \"text-gray-400\" : \"text-gray-600\"),\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Home_Search_Settings_lucide_react__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {\n                                    size: 24\n                                }, void 0, false, {\n                                    fileName: \"/home/project/app/page.tsx\",\n                                    lineNumber: 811,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: \"text-xs\",\n                                    children: \"Search\"\n                                }, void 0, false, {\n                                    fileName: \"/home/project/app/page.tsx\",\n                                    lineNumber: 812,\n                                    columnNumber: 17\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/home/project/app/page.tsx\",\n                            lineNumber: 805,\n                            columnNumber: 15\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: ()=>setActiveTab(\"settings\"),\n                            className: \"flex flex-col items-center space-y-1 p-2 transition-colors \".concat(activeTab === \"settings\" ? \"text-purple-400\" : isDarkMode ? \"text-gray-400\" : \"text-gray-600\"),\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Home_Search_Settings_lucide_react__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n                                    size: 24\n                                }, void 0, false, {\n                                    fileName: \"/home/project/app/page.tsx\",\n                                    lineNumber: 820,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: \"text-xs\",\n                                    children: \"Settings\"\n                                }, void 0, false, {\n                                    fileName: \"/home/project/app/page.tsx\",\n                                    lineNumber: 821,\n                                    columnNumber: 17\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/home/project/app/page.tsx\",\n                            lineNumber: 814,\n                            columnNumber: 15\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/home/project/app/page.tsx\",\n                    lineNumber: 795,\n                    columnNumber: 13\n                }, this)\n            }, void 0, false, {\n                fileName: \"/home/project/app/page.tsx\",\n                lineNumber: 794,\n                columnNumber: 11\n            }, this),\n            currentSong && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                children: !isPlayerMaximized ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_MinimizedPlayer__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    song: currentSong,\n                    isPlaying: isPlaying,\n                    imageUrl: imageUrls[currentSong.img_id],\n                    onTogglePlay: togglePlay,\n                    onMaximize: togglePlayerSize,\n                    onPrevious: handlePrevious,\n                    onNext: handleNext,\n                    onClose: closePlayer,\n                    onToggleLike: ()=>handleToggleLike(currentSong.id),\n                    formatNumber: formatNumber,\n                    currentTime: currentTime,\n                    duration: duration\n                }, void 0, false, {\n                    fileName: \"/home/project/app/page.tsx\",\n                    lineNumber: 831,\n                    columnNumber: 15\n                }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_MaximizedPlayer__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                    song: currentSong,\n                    isPlaying: isPlaying,\n                    imageUrl: imageUrls[currentSong.img_id],\n                    onTogglePlay: togglePlay,\n                    onMinimize: togglePlayerSize,\n                    onPrevious: handlePrevious,\n                    onNext: handleNext,\n                    onToggleLike: ()=>handleToggleLike(currentSong.id),\n                    formatNumber: formatNumber,\n                    onAddToPlaylist: ()=>handleAddToPlaylist(currentSong),\n                    currentTime: currentTime,\n                    duration: duration,\n                    setCurrentTime: (seekTime)=>{\n                        if (audioRef.current && !isNaN(audioRef.current.duration)) {\n                            setIsExternallySeeking(true);\n                            audioRef.current.currentTime = seekTime;\n                            setCurrentTimeState(seekTime);\n                            setTimeout(()=>setIsExternallySeeking(false), 200);\n                        } else {\n                            setPendingSeekTime(seekTime); // Will apply onLoadedMetadata\n                        }\n                    },\n                    volume: volume,\n                    setVolume: setVolume,\n                    isSeeking: isSeeking,\n                    setIsSeeking: setIsSeeking,\n                    queue: queue,\n                    onRemoveFromQueue: removeFromQueue,\n                    onSongPlay: handleSongPlay,\n                    imageUrls: imageUrls,\n                    isShuffleEnabled: isShuffleEnabled,\n                    setIsShuffleEnabled: setIsShuffleEnabled,\n                    repeatMode: repeatMode,\n                    setRepeatMode: setRepeatMode,\n                    sleepTimer: sleepTimer,\n                    remainingTime: remainingTime,\n                    onOpenSleepTimer: ()=>setShowSleepTimerModal(true)\n                }, void 0, false, {\n                    fileName: \"/home/project/app/page.tsx\",\n                    lineNumber: 846,\n                    columnNumber: 15\n                }, this)\n            }, void 0, false),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_CreatePlaylistModal__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                isOpen: showCreatePlaylistModal,\n                onClose: ()=>setShowCreatePlaylistModal(false),\n                onCreatePlaylist: createPlaylist\n            }, void 0, false, {\n                fileName: \"/home/project/app/page.tsx\",\n                lineNumber: 894,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_AddToPlaylistModal__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                isOpen: showAddToPlaylistModal,\n                onClose: ()=>{\n                    setShowAddToPlaylistModal(false);\n                    setSelectedSongForPlaylist(null);\n                },\n                song: selectedSongForPlaylist,\n                playlists: playlists,\n                onAddToPlaylist: addSongToPlaylist,\n                onCreatePlaylist: ()=>{\n                    setShowAddToPlaylistModal(false);\n                    setShowCreatePlaylistModal(true);\n                },\n                imageUrls: imageUrls,\n                setImageUrls: setImageUrls\n            }, void 0, false, {\n                fileName: \"/home/project/app/page.tsx\",\n                lineNumber: 900,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_SleepTimerModal__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                isOpen: showSleepTimerModal,\n                onClose: ()=>setShowSleepTimerModal(false),\n                onSetTimer: handleSleepTimerSet,\n                currentTimer: sleepTimer\n            }, void 0, false, {\n                fileName: \"/home/project/app/page.tsx\",\n                lineNumber: 917,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"audio\", {\n                ref: audioRef,\n                src: audioUrl !== null && audioUrl !== void 0 ? audioUrl : undefined,\n                onEnded: handleSongEnd,\n                onTimeUpdate: ()=>{\n                    if (audioRef.current && !isSeeking && !isExternallySeeking) {\n                        const current = audioRef.current.currentTime;\n                        // Only update state if the difference is significant\n                        if (Math.abs(currentTime - current) > 0.25) {\n                            setCurrentTime(current);\n                        }\n                    }\n                },\n                onLoadedMetadata: handleLoadedMetadata,\n                onVolumeChange: ()=>{\n                    if (audioRef.current) {\n                        setVolume(audioRef.current.volume);\n                    }\n                },\n                style: {\n                    display: \"none\"\n                }\n            }, void 0, false, {\n                fileName: \"/home/project/app/page.tsx\",\n                lineNumber: 923,\n                columnNumber: 9\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/home/project/app/page.tsx\",\n        lineNumber: 786,\n        columnNumber: 7\n    }, this);\n}\n_s(MusicPlayerContent, \"AocsUj2QHbM1C4wcaR7CwygHxt0=\", false, function() {\n    return [\n        _hooks_useAuth__WEBPACK_IMPORTED_MODULE_13__.useAuth,\n        _hooks_useSupabaseData__WEBPACK_IMPORTED_MODULE_16__.useSupabaseData,\n        _hooks_useQueue__WEBPACK_IMPORTED_MODULE_14__.useQueue,\n        _components_ThemeContext__WEBPACK_IMPORTED_MODULE_12__.useTheme,\n        _hooks_useSleepTimer__WEBPACK_IMPORTED_MODULE_15__.useSleepTimer\n    ];\n});\n_c = MusicPlayerContent;\nfunction MusicPlayerApp() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_AuthWrapper__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_hot_toast__WEBPACK_IMPORTED_MODULE_18__.Toaster, {\n                position: \"bottom-center\"\n            }, void 0, false, {\n                fileName: \"/home/project/app/page.tsx\",\n                lineNumber: 954,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MusicPlayerContent, {}, void 0, false, {\n                fileName: \"/home/project/app/page.tsx\",\n                lineNumber: 955,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/home/project/app/page.tsx\",\n        lineNumber: 953,\n        columnNumber: 5\n    }, this);\n}\n_c1 = MusicPlayerApp;\nvar _c, _c1;\n$RefreshReg$(_c, \"MusicPlayerContent\");\n$RefreshReg$(_c1, \"MusicPlayerApp\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./components/HomePage.tsx":
/*!*********************************!*\
  !*** ./components/HomePage.tsx ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _components_ThemeContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/components/ThemeContext */ \"(app-pages-browser)/./components/ThemeContext.tsx\");\n/* harmony import */ var _hooks_useAuth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/hooks/useAuth */ \"(app-pages-browser)/./hooks/useAuth.ts\");\n/* harmony import */ var _barrel_optimize_names_Music_TrendingUp_lucide_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=Music,TrendingUp!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/music.js\");\n/* harmony import */ var _barrel_optimize_names_Music_TrendingUp_lucide_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=Music,TrendingUp!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/trending-up.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _SongCard__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SongCard */ \"(app-pages-browser)/./components/SongCard.tsx\");\n/* harmony import */ var _TrendingSong__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./TrendingSong */ \"(app-pages-browser)/./components/TrendingSong.tsx\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\nconst HomePage = (param)=>{\n    let { songs, onSongPlay, formatNumber, onAddToPlaylist, onAddToQueue, imageUrls, onLoadMore, hasMoreSongs, recentlyPlayedSongs } = param;\n    var _user_user_metadata;\n    _s();\n    const { isDarkMode } = (0,_components_ThemeContext__WEBPACK_IMPORTED_MODULE_1__.useTheme)();\n    const { user } = (0,_hooks_useAuth__WEBPACK_IMPORTED_MODULE_2__.useAuth)();\n    // Show loading state if no songs are loaded yet\n    if (songs.length === 0) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"min-h-screen \".concat(isDarkMode ? \"bg-gray-900 text-white\" : \"bg-gray-50 text-gray-900\", \" flex items-center justify-center\"),\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"text-center\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500 mx-auto mb-4\"\n                    }, void 0, false, {\n                        fileName: \"/home/project/components/HomePage.tsx\",\n                        lineNumber: 32,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: isDarkMode ? \"text-gray-400\" : \"text-gray-600\",\n                        children: \"Loading your music...\"\n                    }, void 0, false, {\n                        fileName: \"/home/project/components/HomePage.tsx\",\n                        lineNumber: 33,\n                        columnNumber: 11\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/home/project/components/HomePage.tsx\",\n                lineNumber: 31,\n                columnNumber: 9\n            }, undefined)\n        }, void 0, false, {\n            fileName: \"/home/project/components/HomePage.tsx\",\n            lineNumber: 30,\n            columnNumber: 7\n        }, undefined);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"min-h-screen \".concat(isDarkMode ? \"bg-gray-900 text-white\" : \"bg-gray-50 text-gray-900\"),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"sticky top-0 \".concat(isDarkMode ? \"bg-gray-900/95\" : \"bg-gray-50/95\", \" backdrop-blur-md z-10 px-4 py-4\"),\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex items-center justify-between mb-4\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                                    className: \"text-2xl font-bold\",\n                                    children: \"Good evening\"\n                                }, void 0, false, {\n                                    fileName: \"/home/project/components/HomePage.tsx\",\n                                    lineNumber: 45,\n                                    columnNumber: 13\n                                }, undefined),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                    className: \"\".concat(isDarkMode ? \"text-gray-400\" : \"text-gray-600\", \" text-sm\"),\n                                    children: \"What do you want to listen to?\"\n                                }, void 0, false, {\n                                    fileName: \"/home/project/components/HomePage.tsx\",\n                                    lineNumber: 46,\n                                    columnNumber: 13\n                                }, undefined)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/home/project/components/HomePage.tsx\",\n                            lineNumber: 44,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-10 h-10 rounded-full flex items-center justify-center overflow-hidden\",\n                            children: (user === null || user === void 0 ? void 0 : (_user_user_metadata = user.user_metadata) === null || _user_user_metadata === void 0 ? void 0 : _user_user_metadata.avatar_url) ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                src: user.user_metadata.avatar_url,\n                                alt: \"Profile\",\n                                className: \"w-full h-full object-cover\"\n                            }, void 0, false, {\n                                fileName: \"/home/project/components/HomePage.tsx\",\n                                lineNumber: 50,\n                                columnNumber: 15\n                            }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"w-full h-full bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Music_TrendingUp_lucide_react__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                                    size: 20,\n                                    className: \"text-white\"\n                                }, void 0, false, {\n                                    fileName: \"/home/project/components/HomePage.tsx\",\n                                    lineNumber: 57,\n                                    columnNumber: 17\n                                }, undefined)\n                            }, void 0, false, {\n                                fileName: \"/home/project/components/HomePage.tsx\",\n                                lineNumber: 56,\n                                columnNumber: 15\n                            }, undefined)\n                        }, void 0, false, {\n                            fileName: \"/home/project/components/HomePage.tsx\",\n                            lineNumber: 48,\n                            columnNumber: 11\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/home/project/components/HomePage.tsx\",\n                    lineNumber: 43,\n                    columnNumber: 9\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/home/project/components/HomePage.tsx\",\n                lineNumber: 42,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"px-4 pb-4\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"mb-8\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex items-center justify-between mb-4\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                        className: \"text-xl font-semibold flex items-center\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Music_TrendingUp_lucide_react__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                                                className: \"mr-2 text-purple-400\",\n                                                size: 20\n                                            }, void 0, false, {\n                                                fileName: \"/home/project/components/HomePage.tsx\",\n                                                lineNumber: 70,\n                                                columnNumber: 15\n                                            }, undefined),\n                                            \"Trending Now\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/home/project/components/HomePage.tsx\",\n                                        lineNumber: 69,\n                                        columnNumber: 13\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        className: \"text-purple-400 text-sm font-medium\",\n                                        children: \"See all\"\n                                    }, void 0, false, {\n                                        fileName: \"/home/project/components/HomePage.tsx\",\n                                        lineNumber: 73,\n                                        columnNumber: 13\n                                    }, undefined)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/home/project/components/HomePage.tsx\",\n                                lineNumber: 68,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex space-x-4 overflow-x-auto pb-2 scrollbar-hide\",\n                                children: songs.slice(0, 10).map((song)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_TrendingSong__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                                        song: {\n                                            ...song,\n                                            image: imageUrls[song.id] || \"\"\n                                        },\n                                        onPlay: onSongPlay,\n                                        formatNumber: formatNumber,\n                                        cachedImageUrl: imageUrls[song.id]\n                                    }, song.id, false, {\n                                        fileName: \"/home/project/components/HomePage.tsx\",\n                                        lineNumber: 77,\n                                        columnNumber: 15\n                                    }, undefined))\n                            }, void 0, false, {\n                                fileName: \"/home/project/components/HomePage.tsx\",\n                                lineNumber: 75,\n                                columnNumber: 11\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/home/project/components/HomePage.tsx\",\n                        lineNumber: 67,\n                        columnNumber: 9\n                    }, undefined),\n                    recentlyPlayedSongs.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"mb-8\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                className: \"text-xl font-bold mb-4 px-2\",\n                                children: \"Recently Played\"\n                            }, void 0, false, {\n                                fileName: \"/home/project/components/HomePage.tsx\",\n                                lineNumber: 90,\n                                columnNumber: 5\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"overflow-x-auto\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex gap-6 px-2 py-4\",\n                                    children: Array.from({\n                                        length: Math.ceil(recentlyPlayedSongs.length / 3)\n                                    }).map((_, columnIndex)=>{\n                                        const start = columnIndex * 3;\n                                        const end = start + 3;\n                                        const group = recentlyPlayedSongs.slice(start, end);\n                                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"min-w-[260px] flex flex-col gap-5\",\n                                            children: group.map((song)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"flex items-center p-3 bg-gray-800/50 hover:bg-gray-800 rounded-lg transition-all group cursor-pointer\",\n                                                    onClick: ()=>onSongPlay({\n                                                            ...song,\n                                                            image: imageUrls[song.id] || \"\"\n                                                        }),\n                                                    children: [\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                                            src: imageUrls[song.id] || \"/placeholder.jpg\",\n                                                            alt: song.name,\n                                                            className: \"w-16 h-16 rounded-lg object-cover shadow-md\"\n                                                        }, void 0, false, {\n                                                            fileName: \"/home/project/components/HomePage.tsx\",\n                                                            lineNumber: 106,\n                                                            columnNumber: 19\n                                                        }, undefined),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                            className: \"flex flex-col ml-4\",\n                                                            children: [\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                    className: \"text-base font-semibold text-white\",\n                                                                    children: song.name\n                                                                }, void 0, false, {\n                                                                    fileName: \"/home/project/components/HomePage.tsx\",\n                                                                    lineNumber: 112,\n                                                                    columnNumber: 21\n                                                                }, undefined),\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                    className: \"text-sm text-neutral-300\",\n                                                                    children: song.artist\n                                                                }, void 0, false, {\n                                                                    fileName: \"/home/project/components/HomePage.tsx\",\n                                                                    lineNumber: 113,\n                                                                    columnNumber: 21\n                                                                }, undefined)\n                                                            ]\n                                                        }, void 0, true, {\n                                                            fileName: \"/home/project/components/HomePage.tsx\",\n                                                            lineNumber: 111,\n                                                            columnNumber: 19\n                                                        }, undefined)\n                                                    ]\n                                                }, song.id, true, {\n                                                    fileName: \"/home/project/components/HomePage.tsx\",\n                                                    lineNumber: 101,\n                                                    columnNumber: 17\n                                                }, undefined))\n                                        }, columnIndex, false, {\n                                            fileName: \"/home/project/components/HomePage.tsx\",\n                                            lineNumber: 99,\n                                            columnNumber: 13\n                                        }, undefined);\n                                    })\n                                }, void 0, false, {\n                                    fileName: \"/home/project/components/HomePage.tsx\",\n                                    lineNumber: 92,\n                                    columnNumber: 7\n                                }, undefined)\n                            }, void 0, false, {\n                                fileName: \"/home/project/components/HomePage.tsx\",\n                                lineNumber: 91,\n                                columnNumber: 5\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/home/project/components/HomePage.tsx\",\n                        lineNumber: 89,\n                        columnNumber: 3\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex items-center justify-between mb-4\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                        className: \"text-xl font-semibold\",\n                                        children: \"Made for you\"\n                                    }, void 0, false, {\n                                        fileName: \"/home/project/components/HomePage.tsx\",\n                                        lineNumber: 129,\n                                        columnNumber: 13\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        className: \"text-purple-400 text-sm font-medium\",\n                                        children: \"See all\"\n                                    }, void 0, false, {\n                                        fileName: \"/home/project/components/HomePage.tsx\",\n                                        lineNumber: 130,\n                                        columnNumber: 13\n                                    }, undefined)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/home/project/components/HomePage.tsx\",\n                                lineNumber: 128,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"space-y-3\",\n                                children: songs.map((song)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_SongCard__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                                        song: {\n                                            ...song,\n                                            image: imageUrls[song.id] || \"\"\n                                        },\n                                        onPlay: onSongPlay,\n                                        formatNumber: formatNumber,\n                                        onAddToPlaylist: onAddToPlaylist,\n                                        onAddToQueue: onAddToQueue,\n                                        cachedImageUrl: imageUrls[song.id]\n                                    }, song.id, false, {\n                                        fileName: \"/home/project/components/HomePage.tsx\",\n                                        lineNumber: 134,\n                                        columnNumber: 15\n                                    }, undefined))\n                            }, void 0, false, {\n                                fileName: \"/home/project/components/HomePage.tsx\",\n                                lineNumber: 132,\n                                columnNumber: 11\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/home/project/components/HomePage.tsx\",\n                        lineNumber: 127,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/home/project/components/HomePage.tsx\",\n                lineNumber: 65,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/home/project/components/HomePage.tsx\",\n        lineNumber: 40,\n        columnNumber: 5\n    }, undefined);\n};\n_s(HomePage, \"jAnCuiuX/KWEMNgoC9SL9mKTjeU=\", false, function() {\n    return [\n        _components_ThemeContext__WEBPACK_IMPORTED_MODULE_1__.useTheme,\n        _hooks_useAuth__WEBPACK_IMPORTED_MODULE_2__.useAuth\n    ];\n});\n_c = HomePage;\n/* harmony default export */ __webpack_exports__[\"default\"] = (HomePage);\nvar _c;\n$RefreshReg$(_c, \"HomePage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/HomePage.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./hooks/useSupabaseData.ts":
/*!**********************************!*\
  !*** ./hooks/useSupabaseData.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSupabaseData: function() { return /* binding */ useSupabaseData; }\n/* harmony export */ });\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./lib/supabase.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction useSupabaseData(user) {\n    const [songs, setSongs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [playlists, setPlaylists] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [likedSongs, setLikedSongs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Set());\n    const [lastPlayedSong, setLastPlayedSong] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [recentlyPlayedSongs, setRecentlyPlayedSongs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [personalizedSongs, setPersonalizedSongs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [currentSongStartTime, setCurrentSongStartTime] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const currentSongRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Get personalized songs based on user's actual listening preferences\n    const getSmartPersonalizedSongs = async (userId, listenedSongsInBatch, excludeSongs)=>{\n        try {\n            console.log(\"\\uD83E\\uDDE0 Fetching smart personalized songs based on listening behavior\");\n            console.log(\"\\uD83C\\uDFB5 Songs user actually listened to:\", listenedSongsInBatch.map((s)=>s.name));\n            if (listenedSongsInBatch.length === 0) {\n                console.log(\"⚠️ No listened songs in batch, falling back to regular personalization\");\n                return [];\n            }\n            // Extract tags and artists from listened songs\n            const preferredTags = new Set();\n            const preferredArtists = new Set();\n            listenedSongsInBatch.forEach((song)=>{\n                var _song_tags;\n                (_song_tags = song.tags) === null || _song_tags === void 0 ? void 0 : _song_tags.forEach((tag)=>preferredTags.add(tag.toLowerCase()));\n                preferredArtists.add(song.artist.toLowerCase());\n            });\n            console.log(\"\\uD83C\\uDFF7️ Preferred tags:\", Array.from(preferredTags));\n            console.log(\"\\uD83C\\uDFA4 Preferred artists:\", Array.from(preferredArtists));\n            // Fetch all songs from database\n            const { data: songsData, error: songsError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"songs\").select(\"*\");\n            if (songsError) {\n                console.error(\"❌ Error fetching songs for smart personalization:\", songsError);\n                return [];\n            }\n            if (!songsData || songsData.length === 0) {\n                console.warn(\"⚠️ No songs found in database\");\n                return [];\n            }\n            // Get user's liked songs\n            const { data: likedData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"liked_songs\").select(\"song_id\").eq(\"user_id\", userId);\n            const userLikedSongs = new Set();\n            if (likedData) {\n                likedData.forEach((item)=>userLikedSongs.add(item.song_id));\n            }\n            // Filter and score songs based on listening preferences\n            const availableSongs = songsData.filter((song)=>{\n                return !excludeSongs.has(song.file_id.toString());\n            });\n            console.log(\"\\uD83C\\uDFB5 Available songs for smart recommendations: \".concat(availableSongs.length));\n            if (availableSongs.length === 0) {\n                console.warn(\"⚠️ No available songs after filtering\");\n                return [];\n            }\n            // Score songs based on user's listening preferences\n            const scoredSongs = availableSongs.map((song)=>{\n                var _song_tags;\n                let score = 0;\n                // High priority: Tag matching with listened songs\n                const songTags = ((_song_tags = song.tags) === null || _song_tags === void 0 ? void 0 : _song_tags.map((tag)=>tag.toLowerCase())) || [];\n                const matchingTags = songTags.filter((tag)=>preferredTags.has(tag));\n                score += matchingTags.length * 25; // Higher weight for tag matching\n                // High priority: Artist matching with listened songs\n                if (preferredArtists.has(song.artist.toLowerCase())) {\n                    score += 30; // Higher weight for artist matching\n                }\n                // Medium priority: Same language as listened songs\n                const listenedLanguages = listenedSongsInBatch.map((s)=>s.language);\n                if (listenedLanguages.includes(song.language)) {\n                    score += 15;\n                }\n                // Lower priority: General popularity\n                score += Math.log(1 + (song.likes || 0)) * 2;\n                score += Math.log(1 + (song.views || 0)) * 1;\n                // Bonus for liked songs\n                if (userLikedSongs.has(song.file_id)) {\n                    score += 10;\n                }\n                // Add small randomness to avoid repetition\n                score += Math.random() * 2;\n                return {\n                    song: convertDatabaseSong(song, userLikedSongs.has(song.file_id)),\n                    score\n                };\n            });\n            // Sort by score and return top recommendations\n            const recommendations = scoredSongs.sort((a, b)=>b.score - a.score).slice(0, 15) // Get more songs for variety\n            .map((entry)=>entry.song);\n            console.log(\"\\uD83E\\uDDE0 Smart recommendations based on listening behavior:\", recommendations.slice(0, 5).map((s)=>\"\".concat(s.name, \" by \").concat(s.artist)));\n            return recommendations;\n        } catch (error) {\n            console.error(\"❌ Error in getSmartPersonalizedSongs:\", error);\n            return [];\n        }\n    };\n    // Convert database song to UI song format\n    const convertDatabaseSong = function(dbSong) {\n        let isLiked = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        return {\n            file_id: dbSong.file_id,\n            img_id: dbSong.img_id,\n            name: dbSong.name,\n            artist: dbSong.artist,\n            language: dbSong.language,\n            tags: dbSong.tags,\n            views: dbSong.views,\n            likes: dbSong.likes,\n            id: dbSong.file_id.toString(),\n            image: \"https://images.pexels.com/photos/\".concat(dbSong.img_id, \"/pexels-photo-\").concat(dbSong.img_id, \".jpeg?auto=compress&cs=tinysrgb&w=300\"),\n            isLiked\n        };\n    };\n    // Fetch all songs\n    const fetchSongs = async ()=>{\n        if (!user) {\n            setSongs([]);\n            return;\n        }\n        try {\n            const { data: songsData, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"songs\").select(\"*\").order(\"views\", {\n                ascending: false\n            });\n            if (error) throw error;\n            let userLikedSongs = new Set();\n            const { data: likedData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"liked_songs\").select(\"song_id\").eq(\"user_id\", user.id);\n            if (likedData) {\n                userLikedSongs = new Set(likedData.map((item)=>item.song_id));\n                setLikedSongs(userLikedSongs);\n            }\n            const convertedSongs = (songsData === null || songsData === void 0 ? void 0 : songsData.map((song)=>convertDatabaseSong(song, userLikedSongs.has(song.file_id)))) || [];\n            const sortedSongs = [\n                ...convertedSongs\n            ].sort((a, b)=>{\n                const aScore = a.views + a.likes;\n                const bScore = b.views + b.likes;\n                return bScore - aScore;\n            });\n            setSongs(sortedSongs);\n            const { data: userData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"users\").select(\"last_song_file_id\").eq(\"id\", user.id).single();\n            if (userData === null || userData === void 0 ? void 0 : userData.last_song_file_id) {\n                const lastSong = convertedSongs.find((song)=>song.file_id === userData.last_song_file_id);\n                if (lastSong) {\n                    setLastPlayedSong(lastSong);\n                }\n            }\n        } catch (error) {\n            console.error(\"Error fetching songs:\", error);\n            setSongs([]) // Set empty array on error\n            ;\n        }\n    };\n    // Get personalized songs with proper error handling and filtering\n    const getPersonalizedSongs = async (userId, currentSong, listenedSongs)=>{\n        try {\n            console.log(\"\\uD83C\\uDFB5 Fetching personalized songs for:\", currentSong.name);\n            console.log(\"\\uD83C\\uDFB5 Listened songs count:\", (listenedSongs === null || listenedSongs === void 0 ? void 0 : listenedSongs.size) || 0);\n            // 1. Fetch all songs from database\n            const { data: songsData, error: songsError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"songs\").select(\"*\");\n            if (songsError) {\n                console.error(\"❌ Error fetching songs for personalization:\", songsError);\n                return [];\n            }\n            if (!songsData || songsData.length === 0) {\n                console.warn(\"⚠️ No songs found in database\");\n                return [];\n            }\n            // 2. Fetch user's listening history\n            const { data: historyData, error: historyError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"history\").select(\"song_id, minutes_listened\").eq(\"user_id\", userId);\n            if (historyError) {\n                console.error(\"❌ Error fetching history:\", historyError);\n            }\n            const historyMap = new Map();\n            if (historyData) {\n                historyData.forEach((h)=>historyMap.set(h.song_id, h.minutes_listened || 0));\n            }\n            // 3. Get user's liked songs\n            const { data: likedData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"liked_songs\").select(\"song_id\").eq(\"user_id\", userId);\n            const userLikedSongs = new Set();\n            if (likedData) {\n                likedData.forEach((item)=>userLikedSongs.add(item.song_id));\n            }\n            // 4. Filter and score songs\n            const availableSongs = songsData.filter((song)=>{\n                // Exclude current song\n                if (song.file_id === currentSong.file_id) {\n                    return false;\n                }\n                // Exclude listened songs if provided\n                if (listenedSongs && listenedSongs.has(song.file_id.toString())) {\n                    console.log(\"\\uD83D\\uDEAB Excluding listened song: \".concat(song.name, \" by \").concat(song.artist));\n                    return false;\n                }\n                return true;\n            });\n            console.log(\"\\uD83C\\uDFB5 Available songs after filtering: \".concat(availableSongs.length));\n            if (availableSongs.length === 0) {\n                console.warn(\"⚠️ No available songs after filtering\");\n                return [];\n            }\n            // 5. Score and sort songs\n            const scoredSongs = availableSongs.map((song)=>{\n                var _song_tags;\n                let score = 0;\n                // Tag matching (highest priority)\n                const matchingTags = ((_song_tags = song.tags) === null || _song_tags === void 0 ? void 0 : _song_tags.filter((tag)=>{\n                    var _currentSong_tags;\n                    return (_currentSong_tags = currentSong.tags) === null || _currentSong_tags === void 0 ? void 0 : _currentSong_tags.includes(tag);\n                })) || [];\n                score += matchingTags.length * 15;\n                // Artist matching\n                if (song.artist === currentSong.artist) {\n                    score += 25;\n                }\n                // Language matching\n                if (song.language === currentSong.language) {\n                    score += 10;\n                }\n                // Listening history boost\n                const listenedMinutes = historyMap.get(song.file_id) || 0;\n                score += Math.min(listenedMinutes * 2, 20); // Cap at 20 points\n                // Popularity boost (likes and views)\n                score += Math.log(1 + (song.likes || 0)) * 2;\n                score += Math.log(1 + (song.views || 0)) * 1;\n                // Liked songs boost\n                if (userLikedSongs.has(song.file_id)) {\n                    score += 8;\n                }\n                // Add controlled randomness to avoid repetition\n                score += Math.random() * 3;\n                return {\n                    song: convertDatabaseSong(song, userLikedSongs.has(song.file_id)),\n                    score\n                };\n            });\n            // 6. Sort by score and return top recommendations\n            const recommendations = scoredSongs.sort((a, b)=>b.score - a.score).slice(0, 10) // Get more songs to have a buffer\n            .map((entry)=>entry.song);\n            console.log(\"\\uD83C\\uDFB5 Personalized recommendations:\", recommendations.slice(0, 5).map((s)=>\"\".concat(s.name, \" by \").concat(s.artist)));\n            console.log(\"\\uD83C\\uDFB5 Total available songs:\", availableSongs.length);\n            return recommendations;\n        } catch (error) {\n            console.error(\"❌ Error in getPersonalizedSongs:\", error);\n            return [];\n        }\n    };\n    // Get personalized songs based on user's top 10 history\n    const fetchPersonalizedSongs = async ()=>{\n        if (!user) {\n            setPersonalizedSongs([]);\n            return;\n        }\n        try {\n            console.log(\"\\uD83C\\uDFAF Fetching personalized songs based on listening history\");\n            // 1. Get user's top 10 songs from history\n            const { data: historyData, error: historyError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"history\").select(\"\\n          song_id,\\n          minutes_listened,\\n          songs (*)\\n        \").eq(\"user_id\", user.id).order(\"minutes_listened\", {\n                ascending: false\n            }).limit(10);\n            if (historyError) {\n                console.error(\"❌ Error fetching history for personalization:\", historyError);\n                setPersonalizedSongs([]);\n                return;\n            }\n            if (!historyData || historyData.length === 0) {\n                console.log(\"⚠️ No listening history found, using trending songs\");\n                // Fallback to trending songs if no history\n                const { data: trendingSongs } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"songs\").select(\"*\").order(\"views\", {\n                    ascending: false\n                }).limit(20);\n                if (trendingSongs) {\n                    const { data: likedData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"liked_songs\").select(\"song_id\").eq(\"user_id\", user.id);\n                    const userLikedSongs = new Set();\n                    if (likedData) {\n                        likedData.forEach((item)=>userLikedSongs.add(item.song_id));\n                    }\n                    const converted = trendingSongs.map((song)=>convertDatabaseSong(song, userLikedSongs.has(song.file_id)));\n                    setPersonalizedSongs(converted);\n                }\n                return;\n            }\n            // 2. Extract common tags and artists from top songs\n            const topSongs = historyData.filter((item)=>item.songs).map((item)=>item.songs);\n            const tagCounts = new Map();\n            const artistCounts = new Map();\n            const historySongIds = new Set();\n            topSongs.forEach((song)=>{\n                historySongIds.add(song.file_id);\n                // Count tags\n                if (song.tags && Array.isArray(song.tags)) {\n                    song.tags.forEach((tag)=>{\n                        const normalizedTag = tag.toLowerCase().trim();\n                        tagCounts.set(normalizedTag, (tagCounts.get(normalizedTag) || 0) + 1);\n                    });\n                }\n                // Count artists\n                const normalizedArtist = song.artist.toLowerCase().trim();\n                artistCounts.set(normalizedArtist, (artistCounts.get(normalizedArtist) || 0) + 1);\n            });\n            // Get most common tags and artists\n            const commonTags = Array.from(tagCounts.entries()).sort((a, b)=>b[1] - a[1]).slice(0, 5).map((param)=>{\n                let [tag] = param;\n                return tag;\n            });\n            const commonArtists = Array.from(artistCounts.entries()).sort((a, b)=>b[1] - a[1]).slice(0, 3).map((param)=>{\n                let [artist] = param;\n                return artist;\n            });\n            console.log(\"\\uD83C\\uDFF7️ Common tags from history:\", commonTags);\n            console.log(\"\\uD83C\\uDFA4 Common artists from history:\", commonArtists);\n            // 3. Fetch all songs and filter out history songs\n            const { data: allSongs, error: songsError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"songs\").select(\"*\");\n            if (songsError) {\n                console.error(\"❌ Error fetching songs for personalization:\", songsError);\n                setPersonalizedSongs([]);\n                return;\n            }\n            if (!allSongs || allSongs.length === 0) {\n                setPersonalizedSongs([]);\n                return;\n            }\n            // 4. Get user's liked songs\n            const { data: likedData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"liked_songs\").select(\"song_id\").eq(\"user_id\", user.id);\n            const userLikedSongs = new Set();\n            if (likedData) {\n                likedData.forEach((item)=>userLikedSongs.add(item.song_id));\n            }\n            // 5. Filter and score songs\n            const availableSongs = allSongs.filter((song)=>!historySongIds.has(song.file_id) // Exclude songs from history\n            );\n            console.log(\"\\uD83C\\uDFB5 Available songs after filtering history: \".concat(availableSongs.length));\n            if (availableSongs.length === 0) {\n                setPersonalizedSongs([]);\n                return;\n            }\n            // 6. Score songs based on common tags and artists\n            const scoredSongs = availableSongs.map((song)=>{\n                let score = 0;\n                // Score based on common tags (highest priority)\n                if (song.tags && Array.isArray(song.tags)) {\n                    const songTags = song.tags.map((tag)=>tag.toLowerCase().trim());\n                    const matchingTags = songTags.filter((tag)=>commonTags.includes(tag));\n                    score += matchingTags.length * 20 // High weight for tag matching\n                    ;\n                }\n                // Score based on common artists\n                const songArtist = song.artist.toLowerCase().trim();\n                if (commonArtists.includes(songArtist)) {\n                    score += 25 // High weight for artist matching\n                    ;\n                }\n                // Bonus for liked songs\n                if (userLikedSongs.has(song.file_id)) {\n                    score += 10;\n                }\n                // General popularity boost (lower weight)\n                score += Math.log(1 + (song.likes || 0)) * 2;\n                score += Math.log(1 + (song.views || 0)) * 1;\n                // Add small randomness to avoid repetition\n                score += Math.random() * 3;\n                return {\n                    song: convertDatabaseSong(song, userLikedSongs.has(song.file_id)),\n                    score\n                };\n            });\n            // 7. Sort by score and return top recommendations\n            const recommendations = scoredSongs.sort((a, b)=>b.score - a.score).slice(0, 30) // Get top 30 personalized songs\n            .map((entry)=>entry.song);\n            console.log(\"\\uD83C\\uDFAF Personalized recommendations:\", recommendations.slice(0, 5).map((s)=>\"\".concat(s.name, \" by \").concat(s.artist)));\n            setPersonalizedSongs(recommendations);\n        } catch (error) {\n            console.error(\"❌ Error in fetchPersonalizedSongs:\", error);\n            setPersonalizedSongs([]);\n        }\n    };\n    // Fetch recently played songs based on listening history\n    const fetchRecentlyPlayed = async ()=>{\n        if (!user) {\n            setRecentlyPlayedSongs([]);\n            return;\n        }\n        try {\n            // Get user's listening history sorted by minutes listened\n            const { data: historyData, error: historyError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"history\").select(\"\\n          song_id,\\n          minutes_listened,\\n          songs (*)\\n        \").eq(\"user_id\", user.id).order(\"minutes_listened\", {\n                ascending: false\n            }).limit(9);\n            if (historyError) {\n                console.error(\"Error fetching recently played:\", historyError);\n                return;\n            }\n            if (!historyData || historyData.length === 0) {\n                setRecentlyPlayedSongs([]);\n                return;\n            }\n            // Get user's liked songs for proper conversion\n            const { data: likedData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"liked_songs\").select(\"song_id\").eq(\"user_id\", user.id);\n            const userLikedSongs = new Set();\n            if (likedData) {\n                likedData.forEach((item)=>userLikedSongs.add(item.song_id));\n            }\n            // Convert to Song format\n            const recentSongs = historyData.filter((item)=>item.songs) // Ensure song data exists\n            .map((item)=>convertDatabaseSong(item.songs, userLikedSongs.has(item.song_id)));\n            setRecentlyPlayedSongs(recentSongs);\n        } catch (error) {\n            console.error(\"Error fetching recently played songs:\", error);\n            setRecentlyPlayedSongs([]);\n        }\n    };\n    // Fetch user playlists\n    const fetchPlaylists = async ()=>{\n        if (!user) {\n            setPlaylists([]);\n            return;\n        }\n        try {\n            const { data: playlistsData, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"playlists\").select(\"\\n          id,\\n          name,\\n          playlist_songs (\\n            songs (*)\\n          )\\n        \").eq(\"user_id\", user.id);\n            if (error) throw error;\n            const convertedPlaylists = (playlistsData === null || playlistsData === void 0 ? void 0 : playlistsData.map((playlist)=>{\n                var _playlist_playlist_songs, _playlistSongs_;\n                const playlistSongs = ((_playlist_playlist_songs = playlist.playlist_songs) === null || _playlist_playlist_songs === void 0 ? void 0 : _playlist_playlist_songs.map((ps)=>convertDatabaseSong(ps.songs, likedSongs.has(ps.songs.file_id)))) || [];\n                return {\n                    id: playlist.id.toString(),\n                    name: playlist.name,\n                    songCount: playlistSongs.length,\n                    image: ((_playlistSongs_ = playlistSongs[0]) === null || _playlistSongs_ === void 0 ? void 0 : _playlistSongs_.image) || \"https://images.pexels.com/photos/1763075/pexels-photo-1763075.jpeg?auto=compress&cs=tinysrgb&w=300\",\n                    songs: playlistSongs\n                };\n            })) || [];\n            setPlaylists(convertedPlaylists);\n        } catch (error) {\n            console.error(\"Error fetching playlists:\", error);\n        }\n    };\n    // Toggle like song\n    const toggleLike = async (songId)=>{\n        if (!user) return;\n        const songFileId = parseInt(songId);\n        const isCurrentlyLiked = likedSongs.has(songFileId);\n        try {\n            if (isCurrentlyLiked) {\n                // Remove from liked_songs\n                const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"liked_songs\").delete().eq(\"user_id\", user.id).eq(\"song_id\", songFileId);\n                if (error) throw error;\n                // Decrement likes\n                await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc(\"decrement_song_likes\", {\n                    song_file_id: songFileId\n                });\n                setLikedSongs((prev)=>{\n                    const newSet = new Set(prev);\n                    newSet.delete(songFileId);\n                    return newSet;\n                });\n            } else {\n                // Add to liked_songs\n                const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"liked_songs\").insert({\n                    user_id: user.id,\n                    song_id: songFileId\n                });\n                if (error) throw error;\n                // Increment likes\n                await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc(\"increment_song_likes\", {\n                    song_file_id: songFileId\n                });\n                setLikedSongs((prev)=>new Set(prev).add(songFileId));\n            }\n            // Update songs state\n            // Update songs state\n            setSongs((prevSongs)=>prevSongs.map((song)=>song.id === songId ? {\n                        ...song,\n                        isLiked: !isCurrentlyLiked,\n                        likes: song.likes + (isCurrentlyLiked ? -1 : 1)\n                    } : song));\n            // Update playlists state\n            setPlaylists((prevPlaylists)=>prevPlaylists.map((playlist)=>({\n                        ...playlist,\n                        songs: playlist.songs.map((song)=>song.id === songId ? {\n                                ...song,\n                                isLiked: !isCurrentlyLiked,\n                                likes: song.likes + (isCurrentlyLiked ? -1 : 1)\n                            } : song)\n                    })));\n        } catch (error) {\n            console.error(\"Error toggling like:\", error);\n        }\n    };\n    // Create playlist\n    const createPlaylist = async (name)=>{\n        if (!user) return;\n        try {\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"playlists\").insert({\n                user_id: user.id,\n                name\n            }).select().single();\n            if (error) throw error;\n            const newPlaylist = {\n                id: data.id.toString(),\n                name: data.name,\n                songCount: 0,\n                image: \"https://images.pexels.com/photos/1763075/pexels-photo-1763075.jpeg?auto=compress&cs=tinysrgb&w=300\",\n                songs: []\n            };\n            setPlaylists((prev)=>[\n                    ...prev,\n                    newPlaylist\n                ]);\n        } catch (error) {\n            console.error(\"Error creating playlist:\", error);\n        }\n    };\n    // Delete playlist\n    const deletePlaylist = async (playlistId)=>{\n        if (!user) return;\n        try {\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"playlists\").delete().eq(\"id\", parseInt(playlistId)).eq(\"user_id\", user.id);\n            if (error) throw error;\n            setPlaylists((prev)=>prev.filter((playlist)=>playlist.id !== playlistId));\n        } catch (error) {\n            console.error(\"Error deleting playlist:\", error);\n        }\n    };\n    // Rename playlist\n    const renamePlaylist = async (playlistId, newName)=>{\n        if (!user) return;\n        try {\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"playlists\").update({\n                name: newName\n            }).eq(\"id\", parseInt(playlistId)).eq(\"user_id\", user.id);\n            if (error) throw error;\n            setPlaylists((prev)=>prev.map((playlist)=>playlist.id === playlistId ? {\n                        ...playlist,\n                        name: newName\n                    } : playlist));\n        } catch (error) {\n            console.error(\"Error renaming playlist:\", error);\n        }\n    };\n    // Add song to playlist\n    const addSongToPlaylist = async (playlistId, song)=>{\n        if (!user) return;\n        try {\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"playlist_songs\").insert({\n                playlist_id: parseInt(playlistId),\n                song_id: song.file_id\n            });\n            if (error) throw error;\n            setPlaylists((prev)=>prev.map((playlist)=>{\n                    if (playlist.id === playlistId) {\n                        const songExists = playlist.songs.some((s)=>s.id === song.id);\n                        if (!songExists) {\n                            var _updatedSongs_;\n                            const updatedSongs = [\n                                ...playlist.songs,\n                                song\n                            ];\n                            return {\n                                ...playlist,\n                                songs: updatedSongs,\n                                songCount: updatedSongs.length,\n                                image: ((_updatedSongs_ = updatedSongs[0]) === null || _updatedSongs_ === void 0 ? void 0 : _updatedSongs_.image) || playlist.image\n                            };\n                        }\n                    }\n                    return playlist;\n                }));\n        } catch (error) {\n            console.error(\"Error adding song to playlist:\", error);\n        }\n    };\n    // Remove song from playlist\n    const removeSongFromPlaylist = async (playlistId, songId)=>{\n        if (!user) return;\n        try {\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"playlist_songs\").delete().eq(\"playlist_id\", parseInt(playlistId)).eq(\"song_id\", parseInt(songId));\n            if (error) throw error;\n            setPlaylists((prev)=>prev.map((playlist)=>{\n                    if (playlist.id === playlistId) {\n                        var _updatedSongs_;\n                        const updatedSongs = playlist.songs.filter((song)=>song.id !== songId);\n                        return {\n                            ...playlist,\n                            songs: updatedSongs,\n                            songCount: updatedSongs.length,\n                            image: ((_updatedSongs_ = updatedSongs[0]) === null || _updatedSongs_ === void 0 ? void 0 : _updatedSongs_.image) || \"https://images.pexels.com/photos/1763075/pexels-photo-1763075.jpeg?auto=compress&cs=tinysrgb&w=300\"\n                        };\n                    }\n                    return playlist;\n                }));\n        } catch (error) {\n            console.error(\"Error removing song from playlist:\", error);\n        }\n    };\n    // Update last song in user profile\n    const updateLastSong = async (songId)=>{\n        if (!user) return;\n        try {\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"users\").update({\n                last_song_file_id: parseInt(songId)\n            }).eq(\"id\", user.id);\n            if (error) throw error;\n        } catch (error) {\n            console.error(\"Error updating last song:\", error);\n        }\n    };\n    // Record listening history with proper time tracking\n    const recordListeningHistory = async (songId)=>{\n        if (!user) return;\n        // If there's a previous song playing, record its listening time\n        if (currentSongRef.current && currentSongStartTime) {\n            const endTime = new Date();\n            const minutesListened = (endTime.getTime() - currentSongStartTime.getTime()) / (1000 * 60);\n            if (minutesListened > 0.1) {\n                try {\n                    const minutes = Math.round(minutesListened * 100) / 100;\n                    const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc(\"upsert_history_minutes\", {\n                        user_uuid: user.id,\n                        song_file_id: parseInt(currentSongRef.current),\n                        minutes: minutes\n                    });\n                    if (error) {\n                        console.error(\"❌ Error recording song history:\", error);\n                    } else {\n                        console.log(\"✅ History updated: +\".concat(minutes, \" mins for song \").concat(currentSongRef.current));\n                    }\n                } catch (error) {\n                    console.error(\"Error recording previous song history:\", error);\n                }\n            }\n        }\n        // Set new song as current\n        currentSongRef.current = songId;\n        setCurrentSongStartTime(new Date());\n        // Update last song in user profile\n        await updateLastSong(songId);\n        try {\n            await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc(\"increment_song_views\", {\n                song_file_id: parseInt(songId)\n            });\n        } catch (error) {\n            console.error(\"Error incrementing song views:\", error);\n        }\n    };\n    // Stop current song tracking (when player is closed)\n    const stopCurrentSongTracking = async ()=>{\n        if (currentSongRef.current && currentSongStartTime && user) {\n            const endTime = new Date();\n            const minutesListened = (endTime.getTime() - currentSongStartTime.getTime()) / (1000 * 60);\n            if (minutesListened > 0.1) {\n                try {\n                    const minutes = Math.round(minutesListened * 100) / 100;\n                    const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc(\"upsert_history_minutes\", {\n                        user_uuid: user.id,\n                        song_file_id: parseInt(currentSongRef.current),\n                        minutes: minutes\n                    });\n                    if (error) {\n                        console.error(\"❌ Error recording song history on stop:\", error);\n                    } else {\n                        console.log(\"\\uD83D\\uDED1 History updated on stop: +\".concat(minutes, \" mins for song \").concat(currentSongRef.current));\n                    }\n                } catch (error) {\n                    console.error(\"Error recording final song history:\", error);\n                }\n            }\n        }\n        currentSongRef.current = null;\n        setCurrentSongStartTime(null);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const loadData = async ()=>{\n            if (!user) {\n                // Reset data when user logs out\n                setSongs([]);\n                setPlaylists([]);\n                setLikedSongs(new Set());\n                setLastPlayedSong(null);\n                setLoading(false);\n                return;\n            }\n            try {\n                setLoading(true);\n                await Promise.all([\n                    fetchSongs(),\n                    fetchPlaylists(),\n                    fetchRecentlyPlayed(),\n                    fetchPersonalizedSongs()\n                ]);\n            } catch (error) {\n                console.error(\"Error loading data:\", error);\n            } finally{\n                setLoading(false);\n            }\n        };\n        loadData();\n    }, [\n        user\n    ]);\n    return {\n        songs,\n        personalizedSongs,\n        playlists,\n        likedSongs: songs.filter((song)=>song.isLiked),\n        recentlyPlayedSongs,\n        lastPlayedSong,\n        loading,\n        toggleLike,\n        createPlaylist,\n        deletePlaylist,\n        renamePlaylist,\n        addSongToPlaylist,\n        removeSongFromPlaylist,\n        recordListeningHistory,\n        stopCurrentSongTracking,\n        refreshData: ()=>{\n            fetchSongs();\n            fetchPlaylists();\n            fetchRecentlyPlayed();\n            fetchPersonalizedSongs();\n        },\n        getPersonalizedSongs,\n        getSmartPersonalizedSongs\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2hvb2tzL3VzZVN1cGFiYXNlRGF0YS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXVEO0FBR0o7QUFFNUMsU0FBU0ksZ0JBQWdCQyxJQUFpQjtJQUMvQyxNQUFNLENBQUNDLE9BQU9DLFNBQVMsR0FBR0osK0NBQVFBLENBQVMsRUFBRTtJQUM3QyxNQUFNLENBQUNLLFdBQVdDLGFBQWEsR0FBR04sK0NBQVFBLENBQWEsRUFBRTtJQUN6RCxNQUFNLENBQUNPLFlBQVlDLGNBQWMsR0FBR1IsK0NBQVFBLENBQWMsSUFBSVM7SUFDOUQsTUFBTSxDQUFDQyxnQkFBZ0JDLGtCQUFrQixHQUFHWCwrQ0FBUUEsQ0FBYztJQUNsRSxNQUFNLENBQUNZLHFCQUFxQkMsdUJBQXVCLEdBQUdiLCtDQUFRQSxDQUFTLEVBQUU7SUFDekUsTUFBTSxDQUFDYyxtQkFBbUJDLHFCQUFxQixHQUFHZiwrQ0FBUUEsQ0FBUyxFQUFFO0lBQ3JFLE1BQU0sQ0FBQ2dCLFNBQVNDLFdBQVcsR0FBR2pCLCtDQUFRQSxDQUFDO0lBQ3ZDLE1BQU0sQ0FBQ2tCLHNCQUFzQkMsd0JBQXdCLEdBQUduQiwrQ0FBUUEsQ0FBYztJQUM5RSxNQUFNb0IsaUJBQWlCckIsNkNBQU1BLENBQWdCO0lBRTdDLHNFQUFzRTtJQUN0RSxNQUFNc0IsNEJBQTRCLE9BQ2hDQyxRQUNBQyxzQkFDQUM7UUFFQSxJQUFJO1lBQ0ZDLFFBQVFDLEdBQUcsQ0FBQztZQUNaRCxRQUFRQyxHQUFHLENBQUMsaURBQXVDSCxxQkFBcUJJLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRUMsSUFBSTtZQUV2RixJQUFJTixxQkFBcUJPLE1BQU0sS0FBSyxHQUFHO2dCQUNyQ0wsUUFBUUMsR0FBRyxDQUFDO2dCQUNaLE9BQU8sRUFBRTtZQUNYO1lBRUEsK0NBQStDO1lBQy9DLE1BQU1LLGdCQUFnQixJQUFJdEI7WUFDMUIsTUFBTXVCLG1CQUFtQixJQUFJdkI7WUFFN0JjLHFCQUFxQlUsT0FBTyxDQUFDQyxDQUFBQTtvQkFDM0JBO2lCQUFBQSxhQUFBQSxLQUFLQyxJQUFJLGNBQVRELGlDQUFBQSxXQUFXRCxPQUFPLENBQUNHLENBQUFBLE1BQU9MLGNBQWNNLEdBQUcsQ0FBQ0QsSUFBSUUsV0FBVztnQkFDM0ROLGlCQUFpQkssR0FBRyxDQUFDSCxLQUFLSyxNQUFNLENBQUNELFdBQVc7WUFDOUM7WUFFQWIsUUFBUUMsR0FBRyxDQUFDLGlDQUF1QmMsTUFBTUMsSUFBSSxDQUFDVjtZQUM5Q04sUUFBUUMsR0FBRyxDQUFDLG1DQUF5QmMsTUFBTUMsSUFBSSxDQUFDVDtZQUVoRCxnQ0FBZ0M7WUFDaEMsTUFBTSxFQUFFVSxNQUFNQyxTQUFTLEVBQUVDLE9BQU9DLFVBQVUsRUFBRSxHQUFHLE1BQU1oRCxtREFBUUEsQ0FDMUQ0QyxJQUFJLENBQUMsU0FDTEssTUFBTSxDQUFDO1lBRVYsSUFBSUQsWUFBWTtnQkFDZHBCLFFBQVFtQixLQUFLLENBQUMscURBQXFEQztnQkFDbkUsT0FBTyxFQUFFO1lBQ1g7WUFFQSxJQUFJLENBQUNGLGFBQWFBLFVBQVViLE1BQU0sS0FBSyxHQUFHO2dCQUN4Q0wsUUFBUXNCLElBQUksQ0FBQztnQkFDYixPQUFPLEVBQUU7WUFDWDtZQUVBLHlCQUF5QjtZQUN6QixNQUFNLEVBQUVMLE1BQU1NLFNBQVMsRUFBRSxHQUFHLE1BQU1uRCxtREFBUUEsQ0FDdkM0QyxJQUFJLENBQUMsZUFDTEssTUFBTSxDQUFDLFdBQ1BHLEVBQUUsQ0FBQyxXQUFXM0I7WUFFakIsTUFBTTRCLGlCQUFpQixJQUFJekM7WUFDM0IsSUFBSXVDLFdBQVc7Z0JBQ2JBLFVBQVVmLE9BQU8sQ0FBQ2tCLENBQUFBLE9BQVFELGVBQWViLEdBQUcsQ0FBQ2MsS0FBS0MsT0FBTztZQUMzRDtZQUVBLHdEQUF3RDtZQUN4RCxNQUFNQyxpQkFBaUJWLFVBQVVXLE1BQU0sQ0FBQyxDQUFDcEI7Z0JBQ3ZDLE9BQU8sQ0FBQ1YsYUFBYStCLEdBQUcsQ0FBQ3JCLEtBQUtzQixPQUFPLENBQUNDLFFBQVE7WUFDaEQ7WUFFQWhDLFFBQVFDLEdBQUcsQ0FBQywyREFBdUUsT0FBdEIyQixlQUFldkIsTUFBTTtZQUVsRixJQUFJdUIsZUFBZXZCLE1BQU0sS0FBSyxHQUFHO2dCQUMvQkwsUUFBUXNCLElBQUksQ0FBQztnQkFDYixPQUFPLEVBQUU7WUFDWDtZQUVBLG9EQUFvRDtZQUNwRCxNQUFNVyxjQUFjTCxlQUFlMUIsR0FBRyxDQUFDLENBQUNPO29CQUlyQkE7Z0JBSGpCLElBQUl5QixRQUFRO2dCQUVaLGtEQUFrRDtnQkFDbEQsTUFBTUMsV0FBVzFCLEVBQUFBLGFBQUFBLEtBQUtDLElBQUksY0FBVEQsaUNBQUFBLFdBQVdQLEdBQUcsQ0FBQyxDQUFDUyxNQUFnQkEsSUFBSUUsV0FBVyxRQUFPLEVBQUU7Z0JBQ3pFLE1BQU11QixlQUFlRCxTQUFTTixNQUFNLENBQUMsQ0FBQ2xCLE1BQWdCTCxjQUFjd0IsR0FBRyxDQUFDbkI7Z0JBQ3hFdUIsU0FBU0UsYUFBYS9CLE1BQU0sR0FBRyxJQUFJLGlDQUFpQztnQkFFcEUscURBQXFEO2dCQUNyRCxJQUFJRSxpQkFBaUJ1QixHQUFHLENBQUNyQixLQUFLSyxNQUFNLENBQUNELFdBQVcsS0FBSztvQkFDbkRxQixTQUFTLElBQUksb0NBQW9DO2dCQUNuRDtnQkFFQSxtREFBbUQ7Z0JBQ25ELE1BQU1HLG9CQUFvQnZDLHFCQUFxQkksR0FBRyxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFbUMsUUFBUTtnQkFDbEUsSUFBSUQsa0JBQWtCRSxRQUFRLENBQUM5QixLQUFLNkIsUUFBUSxHQUFHO29CQUM3Q0osU0FBUztnQkFDWDtnQkFFQSxxQ0FBcUM7Z0JBQ3JDQSxTQUFTTSxLQUFLdkMsR0FBRyxDQUFDLElBQUtRLENBQUFBLEtBQUtnQyxLQUFLLElBQUksTUFBTTtnQkFDM0NQLFNBQVNNLEtBQUt2QyxHQUFHLENBQUMsSUFBS1EsQ0FBQUEsS0FBS2lDLEtBQUssSUFBSSxNQUFNO2dCQUUzQyx3QkFBd0I7Z0JBQ3hCLElBQUlqQixlQUFlSyxHQUFHLENBQUNyQixLQUFLc0IsT0FBTyxHQUFHO29CQUNwQ0csU0FBUztnQkFDWDtnQkFFQSwyQ0FBMkM7Z0JBQzNDQSxTQUFTTSxLQUFLRyxNQUFNLEtBQUs7Z0JBRXpCLE9BQU87b0JBQ0xsQyxNQUFNbUMsb0JBQW9CbkMsTUFBTWdCLGVBQWVLLEdBQUcsQ0FBQ3JCLEtBQUtzQixPQUFPO29CQUMvREc7Z0JBQ0Y7WUFDRjtZQUVBLCtDQUErQztZQUMvQyxNQUFNVyxrQkFBa0JaLFlBQ3JCYSxJQUFJLENBQUMsQ0FBQ0MsR0FBR0MsSUFBTUEsRUFBRWQsS0FBSyxHQUFHYSxFQUFFYixLQUFLLEVBQ2hDZSxLQUFLLENBQUMsR0FBRyxJQUFJLDZCQUE2QjthQUMxQy9DLEdBQUcsQ0FBQ2dELENBQUFBLFFBQVNBLE1BQU16QyxJQUFJO1lBRTFCVCxRQUFRQyxHQUFHLENBQUMsbUVBQ1Y0QyxnQkFBZ0JJLEtBQUssQ0FBQyxHQUFHLEdBQUcvQyxHQUFHLENBQUNDLENBQUFBLElBQUssR0FBZ0JBLE9BQWJBLEVBQUVDLElBQUksRUFBQyxRQUFlLE9BQVRELEVBQUVXLE1BQU07WUFFL0QsT0FBTytCO1FBRVQsRUFBRSxPQUFPMUIsT0FBTztZQUNkbkIsUUFBUW1CLEtBQUssQ0FBQyx5Q0FBeUNBO1lBQ3ZELE9BQU8sRUFBRTtRQUNYO0lBQ0Y7SUFFQSwwQ0FBMEM7SUFDMUMsTUFBTXlCLHNCQUFzQixTQUFDTztZQUFzQkMsMkVBQW1CO2VBQWlCO1lBQ3JGckIsU0FBU29CLE9BQU9wQixPQUFPO1lBQ3ZCc0IsUUFBUUYsT0FBT0UsTUFBTTtZQUNyQmpELE1BQU0rQyxPQUFPL0MsSUFBSTtZQUNqQlUsUUFBUXFDLE9BQU9yQyxNQUFNO1lBQ3JCd0IsVUFBVWEsT0FBT2IsUUFBUTtZQUN6QjVCLE1BQU15QyxPQUFPekMsSUFBSTtZQUNqQmdDLE9BQU9TLE9BQU9ULEtBQUs7WUFDbkJELE9BQU9VLE9BQU9WLEtBQUs7WUFDbkJhLElBQUlILE9BQU9wQixPQUFPLENBQUNDLFFBQVE7WUFDM0J1QixPQUFPLG9DQUFrRUosT0FBOUJBLE9BQU9FLE1BQU0sRUFBQyxrQkFBOEIsT0FBZEYsT0FBT0UsTUFBTSxFQUFDO1lBQ3ZGRDtRQUNGOztJQUVBLGtCQUFrQjtJQUNsQixNQUFNSSxhQUFhO1FBQ2pCLElBQUksQ0FBQy9FLE1BQU07WUFDVEUsU0FBUyxFQUFFO1lBQ1g7UUFDRjtRQUVBLElBQUk7WUFDRixNQUFNLEVBQUVzQyxNQUFNQyxTQUFTLEVBQUVDLEtBQUssRUFBRSxHQUFHLE1BQU0vQyxtREFBUUEsQ0FDOUM0QyxJQUFJLENBQUMsU0FDTEssTUFBTSxDQUFDLEtBQ1BvQyxLQUFLLENBQUMsU0FBUztnQkFBRUMsV0FBVztZQUFNO1lBRXJDLElBQUl2QyxPQUFPLE1BQU1BO1lBRWpCLElBQUlNLGlCQUFpQixJQUFJekM7WUFFekIsTUFBTSxFQUFFaUMsTUFBTU0sU0FBUyxFQUFFLEdBQUcsTUFBTW5ELG1EQUFRQSxDQUN2QzRDLElBQUksQ0FBQyxlQUNMSyxNQUFNLENBQUMsV0FDUEcsRUFBRSxDQUFDLFdBQVcvQyxLQUFLNkUsRUFBRTtZQUV4QixJQUFJL0IsV0FBVztnQkFDYkUsaUJBQWlCLElBQUl6QyxJQUFJdUMsVUFBVXJCLEdBQUcsQ0FBQ3dCLENBQUFBLE9BQVFBLEtBQUtDLE9BQU87Z0JBQzNENUMsY0FBYzBDO1lBQ2hCO1lBRUEsTUFBTWtDLGlCQUFpQnpDLENBQUFBLHNCQUFBQSxnQ0FBQUEsVUFBV2hCLEdBQUcsQ0FBQ08sQ0FBQUEsT0FDcENtQyxvQkFBb0JuQyxNQUFNZ0IsZUFBZUssR0FBRyxDQUFDckIsS0FBS3NCLE9BQU8sUUFDdEQsRUFBRTtZQUVQLE1BQU02QixjQUFjO21CQUFJRDthQUFlLENBQUNiLElBQUksQ0FBQyxDQUFDQyxHQUFHQztnQkFDL0MsTUFBTWEsU0FBU2QsRUFBRUwsS0FBSyxHQUFHSyxFQUFFTixLQUFLO2dCQUNoQyxNQUFNcUIsU0FBU2QsRUFBRU4sS0FBSyxHQUFHTSxFQUFFUCxLQUFLO2dCQUNoQyxPQUFPcUIsU0FBU0Q7WUFDbEI7WUFFQWxGLFNBQVNpRjtZQUVULE1BQU0sRUFBRTNDLE1BQU04QyxRQUFRLEVBQUUsR0FBRyxNQUFNM0YsbURBQVFBLENBQ3RDNEMsSUFBSSxDQUFDLFNBQ0xLLE1BQU0sQ0FBQyxxQkFDUEcsRUFBRSxDQUFDLE1BQU0vQyxLQUFLNkUsRUFBRSxFQUNoQlUsTUFBTTtZQUVULElBQUlELHFCQUFBQSwrQkFBQUEsU0FBVUUsaUJBQWlCLEVBQUU7Z0JBQy9CLE1BQU1DLFdBQVdQLGVBQWVRLElBQUksQ0FBQzFELENBQUFBLE9BQVFBLEtBQUtzQixPQUFPLEtBQUtnQyxTQUFTRSxpQkFBaUI7Z0JBQ3hGLElBQUlDLFVBQVU7b0JBQ1poRixrQkFBa0JnRjtnQkFDcEI7WUFDRjtRQUNGLEVBQUUsT0FBTy9DLE9BQU87WUFDZG5CLFFBQVFtQixLQUFLLENBQUMseUJBQXlCQTtZQUN2Q3hDLFNBQVMsRUFBRSxFQUFFLDJCQUEyQjs7UUFDMUM7SUFDRjtJQUVBLGtFQUFrRTtJQUNsRSxNQUFNeUYsdUJBQXVCLE9BQU92RSxRQUFnQndFLGFBQW1CQztRQUNyRSxJQUFJO1lBQ0Z0RSxRQUFRQyxHQUFHLENBQUMsaURBQXVDb0UsWUFBWWpFLElBQUk7WUFDbkVKLFFBQVFDLEdBQUcsQ0FBQyxzQ0FBNEJxRSxDQUFBQSwwQkFBQUEsb0NBQUFBLGNBQWVDLElBQUksS0FBSTtZQUUvRCxtQ0FBbUM7WUFDbkMsTUFBTSxFQUFFdEQsTUFBTUMsU0FBUyxFQUFFQyxPQUFPQyxVQUFVLEVBQUUsR0FBRyxNQUFNaEQsbURBQVFBLENBQzFENEMsSUFBSSxDQUFDLFNBQ0xLLE1BQU0sQ0FBQztZQUVWLElBQUlELFlBQVk7Z0JBQ2RwQixRQUFRbUIsS0FBSyxDQUFDLCtDQUErQ0M7Z0JBQzdELE9BQU8sRUFBRTtZQUNYO1lBRUEsSUFBSSxDQUFDRixhQUFhQSxVQUFVYixNQUFNLEtBQUssR0FBRztnQkFDeENMLFFBQVFzQixJQUFJLENBQUM7Z0JBQ2IsT0FBTyxFQUFFO1lBQ1g7WUFFQSxvQ0FBb0M7WUFDcEMsTUFBTSxFQUFFTCxNQUFNdUQsV0FBVyxFQUFFckQsT0FBT3NELFlBQVksRUFBRSxHQUFHLE1BQU1yRyxtREFBUUEsQ0FDOUQ0QyxJQUFJLENBQUMsV0FDTEssTUFBTSxDQUFDLDZCQUNQRyxFQUFFLENBQUMsV0FBVzNCO1lBRWpCLElBQUk0RSxjQUFjO2dCQUNoQnpFLFFBQVFtQixLQUFLLENBQUMsNkJBQTZCc0Q7WUFDN0M7WUFFQSxNQUFNQyxhQUFhLElBQUlDO1lBQ3ZCLElBQUlILGFBQWE7Z0JBQ2ZBLFlBQVloRSxPQUFPLENBQUNvRSxDQUFBQSxJQUFLRixXQUFXRyxHQUFHLENBQUNELEVBQUVqRCxPQUFPLEVBQUVpRCxFQUFFRSxnQkFBZ0IsSUFBSTtZQUMzRTtZQUVBLDRCQUE0QjtZQUM1QixNQUFNLEVBQUU3RCxNQUFNTSxTQUFTLEVBQUUsR0FBRyxNQUFNbkQsbURBQVFBLENBQ3ZDNEMsSUFBSSxDQUFDLGVBQ0xLLE1BQU0sQ0FBQyxXQUNQRyxFQUFFLENBQUMsV0FBVzNCO1lBRWpCLE1BQU00QixpQkFBaUIsSUFBSXpDO1lBQzNCLElBQUl1QyxXQUFXO2dCQUNiQSxVQUFVZixPQUFPLENBQUNrQixDQUFBQSxPQUFRRCxlQUFlYixHQUFHLENBQUNjLEtBQUtDLE9BQU87WUFDM0Q7WUFFQSw0QkFBNEI7WUFDNUIsTUFBTUMsaUJBQWlCVixVQUFVVyxNQUFNLENBQUMsQ0FBQ3BCO2dCQUN2Qyx1QkFBdUI7Z0JBQ3ZCLElBQUlBLEtBQUtzQixPQUFPLEtBQUtzQyxZQUFZdEMsT0FBTyxFQUFFO29CQUN4QyxPQUFPO2dCQUNUO2dCQUVBLHFDQUFxQztnQkFDckMsSUFBSXVDLGlCQUFpQkEsY0FBY3hDLEdBQUcsQ0FBQ3JCLEtBQUtzQixPQUFPLENBQUNDLFFBQVEsS0FBSztvQkFDL0RoQyxRQUFRQyxHQUFHLENBQUMseUNBQStDUSxPQUFoQkEsS0FBS0wsSUFBSSxFQUFDLFFBQWtCLE9BQVpLLEtBQUtLLE1BQU07b0JBQ3RFLE9BQU87Z0JBQ1Q7Z0JBRUEsT0FBTztZQUNUO1lBRUFkLFFBQVFDLEdBQUcsQ0FBQyxpREFBNkQsT0FBdEIyQixlQUFldkIsTUFBTTtZQUV4RSxJQUFJdUIsZUFBZXZCLE1BQU0sS0FBSyxHQUFHO2dCQUMvQkwsUUFBUXNCLElBQUksQ0FBQztnQkFDYixPQUFPLEVBQUU7WUFDWDtZQUVBLDBCQUEwQjtZQUMxQixNQUFNVyxjQUFjTCxlQUFlMUIsR0FBRyxDQUFDLENBQUNPO29CQUlqQkE7Z0JBSHJCLElBQUl5QixRQUFRO2dCQUVaLGtDQUFrQztnQkFDbEMsTUFBTUUsZUFBZTNCLEVBQUFBLGFBQUFBLEtBQUtDLElBQUksY0FBVEQsaUNBQUFBLFdBQVdvQixNQUFNLENBQUMsQ0FBQ2xCO3dCQUN0QzBEOzRCQUFBQSxvQkFBQUEsWUFBWTNELElBQUksY0FBaEIyRCx3Q0FBQUEsa0JBQWtCOUIsUUFBUSxDQUFDNUI7dUJBQ3hCLEVBQUU7Z0JBQ1B1QixTQUFTRSxhQUFhL0IsTUFBTSxHQUFHO2dCQUUvQixrQkFBa0I7Z0JBQ2xCLElBQUlJLEtBQUtLLE1BQU0sS0FBS3VELFlBQVl2RCxNQUFNLEVBQUU7b0JBQ3RDb0IsU0FBUztnQkFDWDtnQkFFQSxvQkFBb0I7Z0JBQ3BCLElBQUl6QixLQUFLNkIsUUFBUSxLQUFLK0IsWUFBWS9CLFFBQVEsRUFBRTtvQkFDMUNKLFNBQVM7Z0JBQ1g7Z0JBRUEsMEJBQTBCO2dCQUMxQixNQUFNNkMsa0JBQWtCTCxXQUFXTSxHQUFHLENBQUN2RSxLQUFLc0IsT0FBTyxLQUFLO2dCQUN4REcsU0FBU00sS0FBS3lDLEdBQUcsQ0FBQ0Ysa0JBQWtCLEdBQUcsS0FBSyxtQkFBbUI7Z0JBRS9ELHFDQUFxQztnQkFDckM3QyxTQUFTTSxLQUFLdkMsR0FBRyxDQUFDLElBQUtRLENBQUFBLEtBQUtnQyxLQUFLLElBQUksTUFBTTtnQkFDM0NQLFNBQVNNLEtBQUt2QyxHQUFHLENBQUMsSUFBS1EsQ0FBQUEsS0FBS2lDLEtBQUssSUFBSSxNQUFNO2dCQUUzQyxvQkFBb0I7Z0JBQ3BCLElBQUlqQixlQUFlSyxHQUFHLENBQUNyQixLQUFLc0IsT0FBTyxHQUFHO29CQUNwQ0csU0FBUztnQkFDWDtnQkFFQSxnREFBZ0Q7Z0JBQ2hEQSxTQUFTTSxLQUFLRyxNQUFNLEtBQUs7Z0JBRXpCLE9BQU87b0JBQ0xsQyxNQUFNbUMsb0JBQW9CbkMsTUFBTWdCLGVBQWVLLEdBQUcsQ0FBQ3JCLEtBQUtzQixPQUFPO29CQUMvREc7Z0JBQ0Y7WUFDRjtZQUVBLGtEQUFrRDtZQUNsRCxNQUFNVyxrQkFBa0JaLFlBQ3JCYSxJQUFJLENBQUMsQ0FBQ0MsR0FBR0MsSUFBTUEsRUFBRWQsS0FBSyxHQUFHYSxFQUFFYixLQUFLLEVBQ2hDZSxLQUFLLENBQUMsR0FBRyxJQUFJLGtDQUFrQzthQUMvQy9DLEdBQUcsQ0FBQ2dELENBQUFBLFFBQVNBLE1BQU16QyxJQUFJO1lBRTFCVCxRQUFRQyxHQUFHLENBQUMsOENBQW9DNEMsZ0JBQWdCSSxLQUFLLENBQUMsR0FBRyxHQUFHL0MsR0FBRyxDQUFDQyxDQUFBQSxJQUFLLEdBQWdCQSxPQUFiQSxFQUFFQyxJQUFJLEVBQUMsUUFBZSxPQUFURCxFQUFFVyxNQUFNO1lBQzdHZCxRQUFRQyxHQUFHLENBQUMsdUNBQTZCMkIsZUFBZXZCLE1BQU07WUFFOUQsT0FBT3dDO1FBRVQsRUFBRSxPQUFPMUIsT0FBTztZQUNkbkIsUUFBUW1CLEtBQUssQ0FBQyxvQ0FBb0NBO1lBQ2xELE9BQU8sRUFBRTtRQUNYO0lBQ0Y7SUFFQSx3REFBd0Q7SUFDeEQsTUFBTStELHlCQUF5QjtRQUM3QixJQUFJLENBQUN6RyxNQUFNO1lBQ1RhLHFCQUFxQixFQUFFO1lBQ3ZCO1FBQ0Y7UUFFQSxJQUFJO1lBQ0ZVLFFBQVFDLEdBQUcsQ0FBQztZQUVaLDBDQUEwQztZQUMxQyxNQUFNLEVBQUVnQixNQUFNdUQsV0FBVyxFQUFFckQsT0FBT3NELFlBQVksRUFBRSxHQUFHLE1BQU1yRyxtREFBUUEsQ0FDOUQ0QyxJQUFJLENBQUMsV0FDTEssTUFBTSxDQUFFLG9GQUtSRyxFQUFFLENBQUMsV0FBVy9DLEtBQUs2RSxFQUFFLEVBQ3JCRyxLQUFLLENBQUMsb0JBQW9CO2dCQUFFQyxXQUFXO1lBQU0sR0FDN0N5QixLQUFLLENBQUM7WUFFVCxJQUFJVixjQUFjO2dCQUNoQnpFLFFBQVFtQixLQUFLLENBQUMsaURBQWlEc0Q7Z0JBQy9EbkYscUJBQXFCLEVBQUU7Z0JBQ3ZCO1lBQ0Y7WUFFQSxJQUFJLENBQUNrRixlQUFlQSxZQUFZbkUsTUFBTSxLQUFLLEdBQUc7Z0JBQzVDTCxRQUFRQyxHQUFHLENBQUM7Z0JBQ1osMkNBQTJDO2dCQUMzQyxNQUFNLEVBQUVnQixNQUFNbUUsYUFBYSxFQUFFLEdBQUcsTUFBTWhILG1EQUFRQSxDQUMzQzRDLElBQUksQ0FBQyxTQUNMSyxNQUFNLENBQUMsS0FDUG9DLEtBQUssQ0FBQyxTQUFTO29CQUFFQyxXQUFXO2dCQUFNLEdBQ2xDeUIsS0FBSyxDQUFDO2dCQUVULElBQUlDLGVBQWU7b0JBQ2pCLE1BQU0sRUFBRW5FLE1BQU1NLFNBQVMsRUFBRSxHQUFHLE1BQU1uRCxtREFBUUEsQ0FDdkM0QyxJQUFJLENBQUMsZUFDTEssTUFBTSxDQUFDLFdBQ1BHLEVBQUUsQ0FBQyxXQUFXL0MsS0FBSzZFLEVBQUU7b0JBRXhCLE1BQU03QixpQkFBaUIsSUFBSXpDO29CQUMzQixJQUFJdUMsV0FBVzt3QkFDYkEsVUFBVWYsT0FBTyxDQUFDa0IsQ0FBQUEsT0FBUUQsZUFBZWIsR0FBRyxDQUFDYyxLQUFLQyxPQUFPO29CQUMzRDtvQkFFQSxNQUFNMEQsWUFBWUQsY0FBY2xGLEdBQUcsQ0FBQ08sQ0FBQUEsT0FDbENtQyxvQkFBb0JuQyxNQUFNZ0IsZUFBZUssR0FBRyxDQUFDckIsS0FBS3NCLE9BQU87b0JBRTNEekMscUJBQXFCK0Y7Z0JBQ3ZCO2dCQUNBO1lBQ0Y7WUFFQSxvREFBb0Q7WUFDcEQsTUFBTUMsV0FBV2QsWUFDZDNDLE1BQU0sQ0FBQ0gsQ0FBQUEsT0FBUUEsS0FBS2hELEtBQUssRUFDekJ3QixHQUFHLENBQUN3QixDQUFBQSxPQUFRQSxLQUFLaEQsS0FBSztZQUV6QixNQUFNNkcsWUFBWSxJQUFJWjtZQUN0QixNQUFNYSxlQUFlLElBQUliO1lBQ3pCLE1BQU1jLGlCQUFpQixJQUFJekc7WUFFM0JzRyxTQUFTOUUsT0FBTyxDQUFDQyxDQUFBQTtnQkFDZmdGLGVBQWU3RSxHQUFHLENBQUNILEtBQUtzQixPQUFPO2dCQUUvQixhQUFhO2dCQUNiLElBQUl0QixLQUFLQyxJQUFJLElBQUlLLE1BQU0yRSxPQUFPLENBQUNqRixLQUFLQyxJQUFJLEdBQUc7b0JBQ3pDRCxLQUFLQyxJQUFJLENBQUNGLE9BQU8sQ0FBQyxDQUFDRzt3QkFDakIsTUFBTWdGLGdCQUFnQmhGLElBQUlFLFdBQVcsR0FBRytFLElBQUk7d0JBQzVDTCxVQUFVVixHQUFHLENBQUNjLGVBQWUsQ0FBQ0osVUFBVVAsR0FBRyxDQUFDVyxrQkFBa0IsS0FBSztvQkFDckU7Z0JBQ0Y7Z0JBRUEsZ0JBQWdCO2dCQUNoQixNQUFNRSxtQkFBbUJwRixLQUFLSyxNQUFNLENBQUNELFdBQVcsR0FBRytFLElBQUk7Z0JBQ3ZESixhQUFhWCxHQUFHLENBQUNnQixrQkFBa0IsQ0FBQ0wsYUFBYVIsR0FBRyxDQUFDYSxxQkFBcUIsS0FBSztZQUNqRjtZQUVBLG1DQUFtQztZQUNuQyxNQUFNQyxhQUFhL0UsTUFBTUMsSUFBSSxDQUFDdUUsVUFBVVEsT0FBTyxJQUM1Q2pELElBQUksQ0FBQyxDQUFDQyxHQUFHQyxJQUFNQSxDQUFDLENBQUMsRUFBRSxHQUFHRCxDQUFDLENBQUMsRUFBRSxFQUMxQkUsS0FBSyxDQUFDLEdBQUcsR0FDVC9DLEdBQUcsQ0FBQztvQkFBQyxDQUFDUyxJQUFJO3VCQUFLQTs7WUFFbEIsTUFBTXFGLGdCQUFnQmpGLE1BQU1DLElBQUksQ0FBQ3dFLGFBQWFPLE9BQU8sSUFDbERqRCxJQUFJLENBQUMsQ0FBQ0MsR0FBR0MsSUFBTUEsQ0FBQyxDQUFDLEVBQUUsR0FBR0QsQ0FBQyxDQUFDLEVBQUUsRUFDMUJFLEtBQUssQ0FBQyxHQUFHLEdBQ1QvQyxHQUFHLENBQUM7b0JBQUMsQ0FBQ1ksT0FBTzt1QkFBS0E7O1lBRXJCZCxRQUFRQyxHQUFHLENBQUMsMkNBQWlDNkY7WUFDN0M5RixRQUFRQyxHQUFHLENBQUMsNkNBQW1DK0Y7WUFFL0Msa0RBQWtEO1lBQ2xELE1BQU0sRUFBRS9FLE1BQU1nRixRQUFRLEVBQUU5RSxPQUFPQyxVQUFVLEVBQUUsR0FBRyxNQUFNaEQsbURBQVFBLENBQ3pENEMsSUFBSSxDQUFDLFNBQ0xLLE1BQU0sQ0FBQztZQUVWLElBQUlELFlBQVk7Z0JBQ2RwQixRQUFRbUIsS0FBSyxDQUFDLCtDQUErQ0M7Z0JBQzdEOUIscUJBQXFCLEVBQUU7Z0JBQ3ZCO1lBQ0Y7WUFFQSxJQUFJLENBQUMyRyxZQUFZQSxTQUFTNUYsTUFBTSxLQUFLLEdBQUc7Z0JBQ3RDZixxQkFBcUIsRUFBRTtnQkFDdkI7WUFDRjtZQUVBLDRCQUE0QjtZQUM1QixNQUFNLEVBQUUyQixNQUFNTSxTQUFTLEVBQUUsR0FBRyxNQUFNbkQsbURBQVFBLENBQ3ZDNEMsSUFBSSxDQUFDLGVBQ0xLLE1BQU0sQ0FBQyxXQUNQRyxFQUFFLENBQUMsV0FBVy9DLEtBQUs2RSxFQUFFO1lBRXhCLE1BQU03QixpQkFBaUIsSUFBSXpDO1lBQzNCLElBQUl1QyxXQUFXO2dCQUNiQSxVQUFVZixPQUFPLENBQUNrQixDQUFBQSxPQUFRRCxlQUFlYixHQUFHLENBQUNjLEtBQUtDLE9BQU87WUFDM0Q7WUFFQSw0QkFBNEI7WUFDNUIsTUFBTUMsaUJBQWlCcUUsU0FBU3BFLE1BQU0sQ0FBQ3BCLENBQUFBLE9BQ3JDLENBQUNnRixlQUFlM0QsR0FBRyxDQUFDckIsS0FBS3NCLE9BQU8sRUFBRSw2QkFBNkI7O1lBR2pFL0IsUUFBUUMsR0FBRyxDQUFDLHlEQUFxRSxPQUF0QjJCLGVBQWV2QixNQUFNO1lBRWhGLElBQUl1QixlQUFldkIsTUFBTSxLQUFLLEdBQUc7Z0JBQy9CZixxQkFBcUIsRUFBRTtnQkFDdkI7WUFDRjtZQUVBLGtEQUFrRDtZQUNsRCxNQUFNMkMsY0FBY0wsZUFBZTFCLEdBQUcsQ0FBQ08sQ0FBQUE7Z0JBQ3JDLElBQUl5QixRQUFRO2dCQUVaLGdEQUFnRDtnQkFDaEQsSUFBSXpCLEtBQUtDLElBQUksSUFBSUssTUFBTTJFLE9BQU8sQ0FBQ2pGLEtBQUtDLElBQUksR0FBRztvQkFDekMsTUFBTXlCLFdBQVcxQixLQUFLQyxJQUFJLENBQUNSLEdBQUcsQ0FBQyxDQUFDUyxNQUFnQkEsSUFBSUUsV0FBVyxHQUFHK0UsSUFBSTtvQkFDdEUsTUFBTXhELGVBQWVELFNBQVNOLE1BQU0sQ0FBQ2xCLENBQUFBLE1BQU9tRixXQUFXdkQsUUFBUSxDQUFDNUI7b0JBQ2hFdUIsU0FBU0UsYUFBYS9CLE1BQU0sR0FBRyxHQUFHLCtCQUErQjs7Z0JBQ25FO2dCQUVBLGdDQUFnQztnQkFDaEMsTUFBTTZGLGFBQWF6RixLQUFLSyxNQUFNLENBQUNELFdBQVcsR0FBRytFLElBQUk7Z0JBQ2pELElBQUlJLGNBQWN6RCxRQUFRLENBQUMyRCxhQUFhO29CQUN0Q2hFLFNBQVMsR0FBRyxrQ0FBa0M7O2dCQUNoRDtnQkFFQSx3QkFBd0I7Z0JBQ3hCLElBQUlULGVBQWVLLEdBQUcsQ0FBQ3JCLEtBQUtzQixPQUFPLEdBQUc7b0JBQ3BDRyxTQUFTO2dCQUNYO2dCQUVBLDBDQUEwQztnQkFDMUNBLFNBQVNNLEtBQUt2QyxHQUFHLENBQUMsSUFBS1EsQ0FBQUEsS0FBS2dDLEtBQUssSUFBSSxNQUFNO2dCQUMzQ1AsU0FBU00sS0FBS3ZDLEdBQUcsQ0FBQyxJQUFLUSxDQUFBQSxLQUFLaUMsS0FBSyxJQUFJLE1BQU07Z0JBRTNDLDJDQUEyQztnQkFDM0NSLFNBQVNNLEtBQUtHLE1BQU0sS0FBSztnQkFFekIsT0FBTztvQkFDTGxDLE1BQU1tQyxvQkFBb0JuQyxNQUFNZ0IsZUFBZUssR0FBRyxDQUFDckIsS0FBS3NCLE9BQU87b0JBQy9ERztnQkFDRjtZQUNGO1lBRUEsa0RBQWtEO1lBQ2xELE1BQU1XLGtCQUFrQlosWUFDckJhLElBQUksQ0FBQyxDQUFDQyxHQUFHQyxJQUFNQSxFQUFFZCxLQUFLLEdBQUdhLEVBQUViLEtBQUssRUFDaENlLEtBQUssQ0FBQyxHQUFHLElBQUksZ0NBQWdDO2FBQzdDL0MsR0FBRyxDQUFDZ0QsQ0FBQUEsUUFBU0EsTUFBTXpDLElBQUk7WUFFMUJULFFBQVFDLEdBQUcsQ0FBQyw4Q0FBb0M0QyxnQkFBZ0JJLEtBQUssQ0FBQyxHQUFHLEdBQUcvQyxHQUFHLENBQUNDLENBQUFBLElBQUssR0FBZ0JBLE9BQWJBLEVBQUVDLElBQUksRUFBQyxRQUFlLE9BQVRELEVBQUVXLE1BQU07WUFDN0d4QixxQkFBcUJ1RDtRQUV2QixFQUFFLE9BQU8xQixPQUFPO1lBQ2RuQixRQUFRbUIsS0FBSyxDQUFDLHNDQUFzQ0E7WUFDcEQ3QixxQkFBcUIsRUFBRTtRQUN6QjtJQUNGO0lBRUEseURBQXlEO0lBQ3pELE1BQU02RyxzQkFBc0I7UUFDMUIsSUFBSSxDQUFDMUgsTUFBTTtZQUNUVyx1QkFBdUIsRUFBRTtZQUN6QjtRQUNGO1FBRUEsSUFBSTtZQUNGLDBEQUEwRDtZQUMxRCxNQUFNLEVBQUU2QixNQUFNdUQsV0FBVyxFQUFFckQsT0FBT3NELFlBQVksRUFBRSxHQUFHLE1BQU1yRyxtREFBUUEsQ0FDOUQ0QyxJQUFJLENBQUMsV0FDTEssTUFBTSxDQUFFLG9GQUtSRyxFQUFFLENBQUMsV0FBVy9DLEtBQUs2RSxFQUFFLEVBQ3JCRyxLQUFLLENBQUMsb0JBQW9CO2dCQUFFQyxXQUFXO1lBQU0sR0FDN0N5QixLQUFLLENBQUM7WUFFVCxJQUFJVixjQUFjO2dCQUNoQnpFLFFBQVFtQixLQUFLLENBQUMsbUNBQW1Dc0Q7Z0JBQ2pEO1lBQ0Y7WUFFQSxJQUFJLENBQUNELGVBQWVBLFlBQVluRSxNQUFNLEtBQUssR0FBRztnQkFDNUNqQix1QkFBdUIsRUFBRTtnQkFDekI7WUFDRjtZQUVBLCtDQUErQztZQUMvQyxNQUFNLEVBQUU2QixNQUFNTSxTQUFTLEVBQUUsR0FBRyxNQUFNbkQsbURBQVFBLENBQ3ZDNEMsSUFBSSxDQUFDLGVBQ0xLLE1BQU0sQ0FBQyxXQUNQRyxFQUFFLENBQUMsV0FBVy9DLEtBQUs2RSxFQUFFO1lBRXhCLE1BQU03QixpQkFBaUIsSUFBSXpDO1lBQzNCLElBQUl1QyxXQUFXO2dCQUNiQSxVQUFVZixPQUFPLENBQUNrQixDQUFBQSxPQUFRRCxlQUFlYixHQUFHLENBQUNjLEtBQUtDLE9BQU87WUFDM0Q7WUFFQSx5QkFBeUI7WUFDekIsTUFBTXlFLGNBQWM1QixZQUNqQjNDLE1BQU0sQ0FBQ0gsQ0FBQUEsT0FBUUEsS0FBS2hELEtBQUssRUFBRSwwQkFBMEI7YUFDckR3QixHQUFHLENBQUN3QixDQUFBQSxPQUFRa0Isb0JBQW9CbEIsS0FBS2hELEtBQUssRUFBRStDLGVBQWVLLEdBQUcsQ0FBQ0osS0FBS0MsT0FBTztZQUU5RXZDLHVCQUF1QmdIO1FBQ3pCLEVBQUUsT0FBT2pGLE9BQU87WUFDZG5CLFFBQVFtQixLQUFLLENBQUMseUNBQXlDQTtZQUN2RC9CLHVCQUF1QixFQUFFO1FBQzNCO0lBQ0Y7SUFFQSx1QkFBdUI7SUFDdkIsTUFBTWlILGlCQUFpQjtRQUNyQixJQUFJLENBQUM1SCxNQUFNO1lBQ1RJLGFBQWEsRUFBRTtZQUNmO1FBQ0Y7UUFFQSxJQUFJO1lBQ0YsTUFBTSxFQUFFb0MsTUFBTXFGLGFBQWEsRUFBRW5GLEtBQUssRUFBRSxHQUFHLE1BQU0vQyxtREFBUUEsQ0FDbEQ0QyxJQUFJLENBQUMsYUFDTEssTUFBTSxDQUFFLDhHQU9SRyxFQUFFLENBQUMsV0FBVy9DLEtBQUs2RSxFQUFFO1lBRXhCLElBQUluQyxPQUFPLE1BQU1BO1lBRWpCLE1BQU1vRixxQkFBaUNELENBQUFBLDBCQUFBQSxvQ0FBQUEsY0FBZXBHLEdBQUcsQ0FBQ3NHLENBQUFBO29CQUNsQ0EsMEJBUWJDO2dCQVJULE1BQU1BLGdCQUFnQkQsRUFBQUEsMkJBQUFBLFNBQVNFLGNBQWMsY0FBdkJGLCtDQUFBQSx5QkFBeUJ0RyxHQUFHLENBQUMsQ0FBQ3lHLEtBQ2xEL0Qsb0JBQW9CK0QsR0FBR2pJLEtBQUssRUFBRUksV0FBV2dELEdBQUcsQ0FBQzZFLEdBQUdqSSxLQUFLLENBQUNxRCxPQUFPLFFBQzFELEVBQUU7Z0JBRVAsT0FBTztvQkFDTHVCLElBQUlrRCxTQUFTbEQsRUFBRSxDQUFDdEIsUUFBUTtvQkFDeEI1QixNQUFNb0csU0FBU3BHLElBQUk7b0JBQ25Cd0csV0FBV0gsY0FBY3BHLE1BQU07b0JBQy9Ca0QsT0FBT2tELEVBQUFBLGtCQUFBQSxhQUFhLENBQUMsRUFBRSxjQUFoQkEsc0NBQUFBLGdCQUFrQmxELEtBQUssS0FBSTtvQkFDbEM3RSxPQUFPK0g7Z0JBQ1Q7WUFDRixPQUFNLEVBQUU7WUFFUjVILGFBQWEwSDtRQUNmLEVBQUUsT0FBT3BGLE9BQU87WUFDZG5CLFFBQVFtQixLQUFLLENBQUMsNkJBQTZCQTtRQUM3QztJQUNGO0lBRUEsbUJBQW1CO0lBQ25CLE1BQU0wRixhQUFhLE9BQU9DO1FBQzFCLElBQUksQ0FBQ3JJLE1BQU07UUFFWCxNQUFNc0ksYUFBYUMsU0FBU0Y7UUFDNUIsTUFBTUcsbUJBQW1CbkksV0FBV2dELEdBQUcsQ0FBQ2lGO1FBRXhDLElBQUk7WUFDRixJQUFJRSxrQkFBa0I7Z0JBQ3BCLDBCQUEwQjtnQkFDMUIsTUFBTSxFQUFFOUYsS0FBSyxFQUFFLEdBQUcsTUFBTS9DLG1EQUFRQSxDQUM3QjRDLElBQUksQ0FBQyxlQUNMa0csTUFBTSxHQUNOMUYsRUFBRSxDQUFDLFdBQVcvQyxLQUFLNkUsRUFBRSxFQUNyQjlCLEVBQUUsQ0FBQyxXQUFXdUY7Z0JBRWpCLElBQUk1RixPQUFPLE1BQU1BO2dCQUVqQixrQkFBa0I7Z0JBQ2xCLE1BQU0vQyxtREFBUUEsQ0FBQytJLEdBQUcsQ0FBQyx3QkFBd0I7b0JBQUVDLGNBQWNMO2dCQUFXO2dCQUV0RWhJLGNBQWNzSSxDQUFBQTtvQkFDWixNQUFNQyxTQUFTLElBQUl0SSxJQUFJcUk7b0JBQ3ZCQyxPQUFPSixNQUFNLENBQUNIO29CQUNkLE9BQU9PO2dCQUNUO1lBQ0YsT0FBTztnQkFDTCxxQkFBcUI7Z0JBQ3JCLE1BQU0sRUFBRW5HLEtBQUssRUFBRSxHQUFHLE1BQU0vQyxtREFBUUEsQ0FDN0I0QyxJQUFJLENBQUMsZUFDTHVHLE1BQU0sQ0FBQztvQkFDTkMsU0FBUy9JLEtBQUs2RSxFQUFFO29CQUNoQjNCLFNBQVNvRjtnQkFDWDtnQkFFRixJQUFJNUYsT0FBTyxNQUFNQTtnQkFFakIsa0JBQWtCO2dCQUNsQixNQUFNL0MsbURBQVFBLENBQUMrSSxHQUFHLENBQUMsd0JBQXdCO29CQUFFQyxjQUFjTDtnQkFBVztnQkFFdEVoSSxjQUFjc0ksQ0FBQUEsT0FBUSxJQUFJckksSUFBSXFJLE1BQU16RyxHQUFHLENBQUNtRztZQUMxQztZQUVBLHFCQUFxQjtZQUNyQixxQkFBcUI7WUFDekJwSSxTQUFTOEksQ0FBQUEsWUFDUEEsVUFBVXZILEdBQUcsQ0FBQ08sQ0FBQUEsT0FDWkEsS0FBSzZDLEVBQUUsS0FBS3dELFNBQ1I7d0JBQ0UsR0FBR3JHLElBQUk7d0JBQ1AyQyxTQUFTLENBQUM2RDt3QkFDVnhFLE9BQU9oQyxLQUFLZ0MsS0FBSyxHQUFJd0UsQ0FBQUEsbUJBQW1CLENBQUMsSUFBSTtvQkFDL0MsSUFDQXhHO1lBS0oseUJBQXlCO1lBQ3pCNUIsYUFBYTZJLENBQUFBLGdCQUNYQSxjQUFjeEgsR0FBRyxDQUFDc0csQ0FBQUEsV0FBYTt3QkFDN0IsR0FBR0EsUUFBUTt3QkFDWDlILE9BQU84SCxTQUFTOUgsS0FBSyxDQUFDd0IsR0FBRyxDQUFDTyxDQUFBQSxPQUN4QkEsS0FBSzZDLEVBQUUsS0FBS3dELFNBQ1I7Z0NBQ0UsR0FBR3JHLElBQUk7Z0NBQ1AyQyxTQUFTLENBQUM2RDtnQ0FDVnhFLE9BQU9oQyxLQUFLZ0MsS0FBSyxHQUFJd0UsQ0FBQUEsbUJBQW1CLENBQUMsSUFBSTs0QkFDL0MsSUFDQXhHO29CQUVSO1FBRUosRUFBRSxPQUFPVSxPQUFPO1lBQ2RuQixRQUFRbUIsS0FBSyxDQUFDLHdCQUF3QkE7UUFDeEM7SUFDRjtJQUdFLGtCQUFrQjtJQUNsQixNQUFNd0csaUJBQWlCLE9BQU92SDtRQUM1QixJQUFJLENBQUMzQixNQUFNO1FBRVgsSUFBSTtZQUNGLE1BQU0sRUFBRXdDLElBQUksRUFBRUUsS0FBSyxFQUFFLEdBQUcsTUFBTS9DLG1EQUFRQSxDQUNuQzRDLElBQUksQ0FBQyxhQUNMdUcsTUFBTSxDQUFDO2dCQUNOQyxTQUFTL0ksS0FBSzZFLEVBQUU7Z0JBQ2hCbEQ7WUFDRixHQUNDaUIsTUFBTSxHQUNOMkMsTUFBTTtZQUVULElBQUk3QyxPQUFPLE1BQU1BO1lBRWpCLE1BQU15RyxjQUF3QjtnQkFDNUJ0RSxJQUFJckMsS0FBS3FDLEVBQUUsQ0FBQ3RCLFFBQVE7Z0JBQ3BCNUIsTUFBTWEsS0FBS2IsSUFBSTtnQkFDZndHLFdBQVc7Z0JBQ1hyRCxPQUFPO2dCQUNQN0UsT0FBTyxFQUFFO1lBQ1g7WUFFQUcsYUFBYXdJLENBQUFBLE9BQVE7dUJBQUlBO29CQUFNTztpQkFBWTtRQUM3QyxFQUFFLE9BQU96RyxPQUFPO1lBQ2RuQixRQUFRbUIsS0FBSyxDQUFDLDRCQUE0QkE7UUFDNUM7SUFDRjtJQUVBLGtCQUFrQjtJQUNsQixNQUFNMEcsaUJBQWlCLE9BQU9DO1FBQzVCLElBQUksQ0FBQ3JKLE1BQU07UUFFWCxJQUFJO1lBQ0YsTUFBTSxFQUFFMEMsS0FBSyxFQUFFLEdBQUcsTUFBTS9DLG1EQUFRQSxDQUM3QjRDLElBQUksQ0FBQyxhQUNMa0csTUFBTSxHQUNOMUYsRUFBRSxDQUFDLE1BQU13RixTQUFTYyxhQUNsQnRHLEVBQUUsQ0FBQyxXQUFXL0MsS0FBSzZFLEVBQUU7WUFFeEIsSUFBSW5DLE9BQU8sTUFBTUE7WUFFakJ0QyxhQUFhd0ksQ0FBQUEsT0FBUUEsS0FBS3hGLE1BQU0sQ0FBQzJFLENBQUFBLFdBQVlBLFNBQVNsRCxFQUFFLEtBQUt3RTtRQUMvRCxFQUFFLE9BQU8zRyxPQUFPO1lBQ2RuQixRQUFRbUIsS0FBSyxDQUFDLDRCQUE0QkE7UUFDNUM7SUFDRjtJQUVBLGtCQUFrQjtJQUNsQixNQUFNNEcsaUJBQWlCLE9BQU9ELFlBQW9CRTtRQUNoRCxJQUFJLENBQUN2SixNQUFNO1FBRVgsSUFBSTtZQUNGLE1BQU0sRUFBRTBDLEtBQUssRUFBRSxHQUFHLE1BQU0vQyxtREFBUUEsQ0FDN0I0QyxJQUFJLENBQUMsYUFDTGlILE1BQU0sQ0FBQztnQkFBRTdILE1BQU00SDtZQUFRLEdBQ3ZCeEcsRUFBRSxDQUFDLE1BQU13RixTQUFTYyxhQUNsQnRHLEVBQUUsQ0FBQyxXQUFXL0MsS0FBSzZFLEVBQUU7WUFFeEIsSUFBSW5DLE9BQU8sTUFBTUE7WUFFakJ0QyxhQUFhd0ksQ0FBQUEsT0FDWEEsS0FBS25ILEdBQUcsQ0FBQ3NHLENBQUFBLFdBQ1BBLFNBQVNsRCxFQUFFLEtBQUt3RSxhQUNaO3dCQUFFLEdBQUd0QixRQUFRO3dCQUFFcEcsTUFBTTRIO29CQUFRLElBQzdCeEI7UUFHVixFQUFFLE9BQU9yRixPQUFPO1lBQ2RuQixRQUFRbUIsS0FBSyxDQUFDLDRCQUE0QkE7UUFDNUM7SUFDRjtJQUVBLHVCQUF1QjtJQUN2QixNQUFNK0csb0JBQW9CLE9BQU9KLFlBQW9Cckg7UUFDbkQsSUFBSSxDQUFDaEMsTUFBTTtRQUVYLElBQUk7WUFDRixNQUFNLEVBQUUwQyxLQUFLLEVBQUUsR0FBRyxNQUFNL0MsbURBQVFBLENBQzdCNEMsSUFBSSxDQUFDLGtCQUNMdUcsTUFBTSxDQUFDO2dCQUNOWSxhQUFhbkIsU0FBU2M7Z0JBQ3RCbkcsU0FBU2xCLEtBQUtzQixPQUFPO1lBQ3ZCO1lBRUYsSUFBSVosT0FBTyxNQUFNQTtZQUVqQnRDLGFBQWF3SSxDQUFBQSxPQUNYQSxLQUFLbkgsR0FBRyxDQUFDc0csQ0FBQUE7b0JBQ1AsSUFBSUEsU0FBU2xELEVBQUUsS0FBS3dFLFlBQVk7d0JBQzlCLE1BQU1NLGFBQWE1QixTQUFTOUgsS0FBSyxDQUFDMkosSUFBSSxDQUFDbEksQ0FBQUEsSUFBS0EsRUFBRW1ELEVBQUUsS0FBSzdDLEtBQUs2QyxFQUFFO3dCQUM1RCxJQUFJLENBQUM4RSxZQUFZO2dDQU1ORTs0QkFMVCxNQUFNQSxlQUFlO21DQUFJOUIsU0FBUzlILEtBQUs7Z0NBQUUrQjs2QkFBSzs0QkFDOUMsT0FBTztnQ0FDTCxHQUFHK0YsUUFBUTtnQ0FDWDlILE9BQU80SjtnQ0FDUDFCLFdBQVcwQixhQUFhakksTUFBTTtnQ0FDOUJrRCxPQUFPK0UsRUFBQUEsaUJBQUFBLFlBQVksQ0FBQyxFQUFFLGNBQWZBLHFDQUFBQSxlQUFpQi9FLEtBQUssS0FBSWlELFNBQVNqRCxLQUFLOzRCQUNqRDt3QkFDRjtvQkFDRjtvQkFDQSxPQUFPaUQ7Z0JBQ1Q7UUFFSixFQUFFLE9BQU9yRixPQUFPO1lBQ2RuQixRQUFRbUIsS0FBSyxDQUFDLGtDQUFrQ0E7UUFDbEQ7SUFDRjtJQUVBLDRCQUE0QjtJQUM1QixNQUFNb0gseUJBQXlCLE9BQU9ULFlBQW9CaEI7UUFDeEQsSUFBSSxDQUFDckksTUFBTTtRQUVYLElBQUk7WUFDRixNQUFNLEVBQUUwQyxLQUFLLEVBQUUsR0FBRyxNQUFNL0MsbURBQVFBLENBQzdCNEMsSUFBSSxDQUFDLGtCQUNMa0csTUFBTSxHQUNOMUYsRUFBRSxDQUFDLGVBQWV3RixTQUFTYyxhQUMzQnRHLEVBQUUsQ0FBQyxXQUFXd0YsU0FBU0Y7WUFFMUIsSUFBSTNGLE9BQU8sTUFBTUE7WUFFakJ0QyxhQUFhd0ksQ0FBQUEsT0FDWEEsS0FBS25ILEdBQUcsQ0FBQ3NHLENBQUFBO29CQUNQLElBQUlBLFNBQVNsRCxFQUFFLEtBQUt3RSxZQUFZOzRCQU1yQlE7d0JBTFQsTUFBTUEsZUFBZTlCLFNBQVM5SCxLQUFLLENBQUNtRCxNQUFNLENBQUNwQixDQUFBQSxPQUFRQSxLQUFLNkMsRUFBRSxLQUFLd0Q7d0JBQy9ELE9BQU87NEJBQ0wsR0FBR04sUUFBUTs0QkFDWDlILE9BQU80Sjs0QkFDUDFCLFdBQVcwQixhQUFhakksTUFBTTs0QkFDOUJrRCxPQUFPK0UsRUFBQUEsaUJBQUFBLFlBQVksQ0FBQyxFQUFFLGNBQWZBLHFDQUFBQSxlQUFpQi9FLEtBQUssS0FBSTt3QkFDbkM7b0JBQ0Y7b0JBQ0EsT0FBT2lEO2dCQUNUO1FBRUosRUFBRSxPQUFPckYsT0FBTztZQUNkbkIsUUFBUW1CLEtBQUssQ0FBQyxzQ0FBc0NBO1FBQ3REO0lBQ0Y7SUFFQSxtQ0FBbUM7SUFDbkMsTUFBTXFILGlCQUFpQixPQUFPMUI7UUFDNUIsSUFBSSxDQUFDckksTUFBTTtRQUVYLElBQUk7WUFDRixNQUFNLEVBQUUwQyxLQUFLLEVBQUUsR0FBRyxNQUFNL0MsbURBQVFBLENBQzdCNEMsSUFBSSxDQUFDLFNBQ0xpSCxNQUFNLENBQUM7Z0JBQUVoRSxtQkFBbUIrQyxTQUFTRjtZQUFRLEdBQzdDdEYsRUFBRSxDQUFDLE1BQU0vQyxLQUFLNkUsRUFBRTtZQUVuQixJQUFJbkMsT0FBTyxNQUFNQTtRQUNuQixFQUFFLE9BQU9BLE9BQU87WUFDZG5CLFFBQVFtQixLQUFLLENBQUMsNkJBQTZCQTtRQUM3QztJQUNGO0lBRUEscURBQXFEO0lBQ3JELE1BQU1zSCx5QkFBeUIsT0FBTzNCO1FBQ3BDLElBQUksQ0FBQ3JJLE1BQU07UUFFWCxnRUFBZ0U7UUFDOUQsSUFBSWtCLGVBQWUrSSxPQUFPLElBQUlqSixzQkFBc0I7WUFDdEQsTUFBTWtKLFVBQVUsSUFBSUM7WUFDcEIsTUFBTUMsa0JBQWtCLENBQUNGLFFBQVFHLE9BQU8sS0FBS3JKLHFCQUFxQnFKLE9BQU8sRUFBQyxJQUFNLFFBQU8sRUFBQztZQUV4RixJQUFJRCxrQkFBa0IsS0FBSztnQkFDekIsSUFBSTtvQkFDRixNQUFNRSxVQUFVdkcsS0FBS3dHLEtBQUssQ0FBQ0gsa0JBQWtCLE9BQU87b0JBQ3BELE1BQU0sRUFBRTFILEtBQUssRUFBRSxHQUFHLE1BQU0vQyxtREFBUUEsQ0FBQytJLEdBQUcsQ0FBQywwQkFBMEI7d0JBQzdEOEIsV0FBV3hLLEtBQUs2RSxFQUFFO3dCQUNsQjhELGNBQWNKLFNBQVNySCxlQUFlK0ksT0FBTzt3QkFDN0NLLFNBQVNBO29CQUNYO29CQUVBLElBQUk1SCxPQUFPO3dCQUNUbkIsUUFBUW1CLEtBQUssQ0FBQyxtQ0FBbUNBO29CQUNuRCxPQUFPO3dCQUNMbkIsUUFBUUMsR0FBRyxDQUFDLHVCQUFnRE4sT0FBekJvSixTQUFRLG1CQUF3QyxPQUF2QnBKLGVBQWUrSSxPQUFPO29CQUNwRjtnQkFDRixFQUFFLE9BQU92SCxPQUFPO29CQUNkbkIsUUFBUW1CLEtBQUssQ0FBQywwQ0FBMENBO2dCQUMxRDtZQUNGO1FBQ0Y7UUFHRSwwQkFBMEI7UUFDMUJ4QixlQUFlK0ksT0FBTyxHQUFHNUI7UUFDekJwSCx3QkFBd0IsSUFBSWtKO1FBRTVCLG1DQUFtQztRQUNuQyxNQUFNSixlQUFlMUI7UUFDekIsSUFBSTtZQUNGLE1BQU0xSSxtREFBUUEsQ0FBQytJLEdBQUcsQ0FBQyx3QkFBd0I7Z0JBQUVDLGNBQWNKLFNBQVNGO1lBQVE7UUFDOUUsRUFBRSxPQUFPM0YsT0FBTztZQUNkbkIsUUFBUW1CLEtBQUssQ0FBQyxrQ0FBa0NBO1FBQ2xEO0lBRUU7SUFFQSxxREFBcUQ7SUFDckQsTUFBTStILDBCQUEwQjtRQUM5QixJQUFJdkosZUFBZStJLE9BQU8sSUFBSWpKLHdCQUF3QmhCLE1BQU07WUFDMUQsTUFBTWtLLFVBQVUsSUFBSUM7WUFDcEIsTUFBTUMsa0JBQWtCLENBQUNGLFFBQVFHLE9BQU8sS0FBS3JKLHFCQUFxQnFKLE9BQU8sRUFBQyxJQUFNLFFBQU8sRUFBQztZQUV4RixJQUFJRCxrQkFBa0IsS0FBSztnQkFDL0IsSUFBSTtvQkFDRixNQUFNRSxVQUFVdkcsS0FBS3dHLEtBQUssQ0FBQ0gsa0JBQWtCLE9BQU87b0JBQ3BELE1BQU0sRUFBRTFILEtBQUssRUFBRSxHQUFHLE1BQU0vQyxtREFBUUEsQ0FBQytJLEdBQUcsQ0FBQywwQkFBMEI7d0JBQzdEOEIsV0FBV3hLLEtBQUs2RSxFQUFFO3dCQUNsQjhELGNBQWNKLFNBQVNySCxlQUFlK0ksT0FBTzt3QkFDN0NLLFNBQVNBO29CQUNYO29CQUVBLElBQUk1SCxPQUFPO3dCQUNUbkIsUUFBUW1CLEtBQUssQ0FBQywyQ0FBMkNBO29CQUMzRCxPQUFPO3dCQUNMbkIsUUFBUUMsR0FBRyxDQUFDLDBDQUF5RE4sT0FBekJvSixTQUFRLG1CQUF3QyxPQUF2QnBKLGVBQWUrSSxPQUFPO29CQUM3RjtnQkFDRixFQUFFLE9BQU92SCxPQUFPO29CQUNkbkIsUUFBUW1CLEtBQUssQ0FBQyx1Q0FBdUNBO2dCQUN2RDtZQUNGO1FBRUk7UUFFQXhCLGVBQWUrSSxPQUFPLEdBQUc7UUFDekJoSix3QkFBd0I7SUFDMUI7SUFFQXJCLGdEQUFTQSxDQUFDO1FBQ1IsTUFBTThLLFdBQVc7WUFDZixJQUFJLENBQUMxSyxNQUFNO2dCQUNULGdDQUFnQztnQkFDaENFLFNBQVMsRUFBRTtnQkFDWEUsYUFBYSxFQUFFO2dCQUNmRSxjQUFjLElBQUlDO2dCQUNsQkUsa0JBQWtCO2dCQUNsQk0sV0FBVztnQkFDWDtZQUNGO1lBRUEsSUFBSTtnQkFDRkEsV0FBVztnQkFDWCxNQUFNNEosUUFBUUMsR0FBRyxDQUFDO29CQUFDN0Y7b0JBQWM2QztvQkFBa0JGO29CQUF1QmpCO2lCQUF5QjtZQUNyRyxFQUFFLE9BQU8vRCxPQUFPO2dCQUNkbkIsUUFBUW1CLEtBQUssQ0FBQyx1QkFBdUJBO1lBQ3ZDLFNBQVU7Z0JBQ1IzQixXQUFXO1lBQ2I7UUFDRjtRQUVBMko7SUFDRixHQUFHO1FBQUMxSztLQUFLO0lBRVQsT0FBTztRQUNMQztRQUNBVztRQUNBVDtRQUNBRSxZQUFZSixNQUFNbUQsTUFBTSxDQUFDcEIsQ0FBQUEsT0FBUUEsS0FBSzJDLE9BQU87UUFDN0NqRTtRQUNBRjtRQUNBTTtRQUNBc0g7UUFDQWM7UUFDQUU7UUFDQUU7UUFDQUc7UUFDQUs7UUFDQUU7UUFDQVM7UUFDQUksYUFBYTtZQUNYOUY7WUFDQTZDO1lBQ0FGO1lBQ0FqQjtRQUNGO1FBQ0FkO1FBQ0F4RTtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vaG9va3MvdXNlU3VwYWJhc2VEYXRhLnRzP2FiZmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0YWJhc2VTb25nLCBzdXBhYmFzZSB9IGZyb20gJ0AvbGliL3N1cGFiYXNlJ1xuaW1wb3J0IHsgUGxheWxpc3QsIFNvbmcgfSBmcm9tICdAL3R5cGVzJ1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcydcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlU3VwYWJhc2VEYXRhKHVzZXI6IFVzZXIgfCBudWxsKSB7XG4gIGNvbnN0IFtzb25ncywgc2V0U29uZ3NdID0gdXNlU3RhdGU8U29uZ1tdPihbXSlcbiAgY29uc3QgW3BsYXlsaXN0cywgc2V0UGxheWxpc3RzXSA9IHVzZVN0YXRlPFBsYXlsaXN0W10+KFtdKVxuICBjb25zdCBbbGlrZWRTb25ncywgc2V0TGlrZWRTb25nc10gPSB1c2VTdGF0ZTxTZXQ8bnVtYmVyPj4obmV3IFNldCgpKVxuICBjb25zdCBbbGFzdFBsYXllZFNvbmcsIHNldExhc3RQbGF5ZWRTb25nXSA9IHVzZVN0YXRlPFNvbmcgfCBudWxsPihudWxsKVxuICBjb25zdCBbcmVjZW50bHlQbGF5ZWRTb25ncywgc2V0UmVjZW50bHlQbGF5ZWRTb25nc10gPSB1c2VTdGF0ZTxTb25nW10+KFtdKVxuICBjb25zdCBbcGVyc29uYWxpemVkU29uZ3MsIHNldFBlcnNvbmFsaXplZFNvbmdzXSA9IHVzZVN0YXRlPFNvbmdbXT4oW10pXG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpXG4gIGNvbnN0IFtjdXJyZW50U29uZ1N0YXJ0VGltZSwgc2V0Q3VycmVudFNvbmdTdGFydFRpbWVdID0gdXNlU3RhdGU8RGF0ZSB8IG51bGw+KG51bGwpXG4gIGNvbnN0IGN1cnJlbnRTb25nUmVmID0gdXNlUmVmPHN0cmluZyB8IG51bGw+KG51bGwpXG5cbiAgLy8gR2V0IHBlcnNvbmFsaXplZCBzb25ncyBiYXNlZCBvbiB1c2VyJ3MgYWN0dWFsIGxpc3RlbmluZyBwcmVmZXJlbmNlc1xuICBjb25zdCBnZXRTbWFydFBlcnNvbmFsaXplZFNvbmdzID0gYXN5bmMgKFxuICAgIHVzZXJJZDogc3RyaW5nLCBcbiAgICBsaXN0ZW5lZFNvbmdzSW5CYXRjaDogU29uZ1tdLCBcbiAgICBleGNsdWRlU29uZ3M6IFNldDxzdHJpbmc+XG4gICk6IFByb21pc2U8U29uZ1tdPiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKCfwn6egIEZldGNoaW5nIHNtYXJ0IHBlcnNvbmFsaXplZCBzb25ncyBiYXNlZCBvbiBsaXN0ZW5pbmcgYmVoYXZpb3InKTtcbiAgICAgIGNvbnNvbGUubG9nKCfwn461IFNvbmdzIHVzZXIgYWN0dWFsbHkgbGlzdGVuZWQgdG86JywgbGlzdGVuZWRTb25nc0luQmF0Y2gubWFwKHMgPT4gcy5uYW1lKSk7XG4gICAgICBcbiAgICAgIGlmIChsaXN0ZW5lZFNvbmdzSW5CYXRjaC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc29sZS5sb2coJ+KaoO+4jyBObyBsaXN0ZW5lZCBzb25ncyBpbiBiYXRjaCwgZmFsbGluZyBiYWNrIHRvIHJlZ3VsYXIgcGVyc29uYWxpemF0aW9uJyk7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cblxuICAgICAgLy8gRXh0cmFjdCB0YWdzIGFuZCBhcnRpc3RzIGZyb20gbGlzdGVuZWQgc29uZ3NcbiAgICAgIGNvbnN0IHByZWZlcnJlZFRhZ3MgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgICAgIGNvbnN0IHByZWZlcnJlZEFydGlzdHMgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgICAgIFxuICAgICAgbGlzdGVuZWRTb25nc0luQmF0Y2guZm9yRWFjaChzb25nID0+IHtcbiAgICAgICAgc29uZy50YWdzPy5mb3JFYWNoKHRhZyA9PiBwcmVmZXJyZWRUYWdzLmFkZCh0YWcudG9Mb3dlckNhc2UoKSkpO1xuICAgICAgICBwcmVmZXJyZWRBcnRpc3RzLmFkZChzb25nLmFydGlzdC50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zb2xlLmxvZygn8J+Pt++4jyBQcmVmZXJyZWQgdGFnczonLCBBcnJheS5mcm9tKHByZWZlcnJlZFRhZ3MpKTtcbiAgICAgIGNvbnNvbGUubG9nKCfwn46kIFByZWZlcnJlZCBhcnRpc3RzOicsIEFycmF5LmZyb20ocHJlZmVycmVkQXJ0aXN0cykpO1xuXG4gICAgICAvLyBGZXRjaCBhbGwgc29uZ3MgZnJvbSBkYXRhYmFzZVxuICAgICAgY29uc3QgeyBkYXRhOiBzb25nc0RhdGEsIGVycm9yOiBzb25nc0Vycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnc29uZ3MnKVxuICAgICAgICAuc2VsZWN0KCcqJyk7XG4gICAgICBcbiAgICAgIGlmIChzb25nc0Vycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBmZXRjaGluZyBzb25ncyBmb3Igc21hcnQgcGVyc29uYWxpemF0aW9uOicsIHNvbmdzRXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmICghc29uZ3NEYXRhIHx8IHNvbmdzRGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gTm8gc29uZ3MgZm91bmQgaW4gZGF0YWJhc2UnKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICAvLyBHZXQgdXNlcidzIGxpa2VkIHNvbmdzXG4gICAgICBjb25zdCB7IGRhdGE6IGxpa2VkRGF0YSB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ2xpa2VkX3NvbmdzJylcbiAgICAgICAgLnNlbGVjdCgnc29uZ19pZCcpXG4gICAgICAgIC5lcSgndXNlcl9pZCcsIHVzZXJJZCk7XG4gICAgICBcbiAgICAgIGNvbnN0IHVzZXJMaWtlZFNvbmdzID0gbmV3IFNldDxudW1iZXI+KCk7XG4gICAgICBpZiAobGlrZWREYXRhKSB7XG4gICAgICAgIGxpa2VkRGF0YS5mb3JFYWNoKGl0ZW0gPT4gdXNlckxpa2VkU29uZ3MuYWRkKGl0ZW0uc29uZ19pZCkpO1xuICAgICAgfVxuXG4gICAgICAvLyBGaWx0ZXIgYW5kIHNjb3JlIHNvbmdzIGJhc2VkIG9uIGxpc3RlbmluZyBwcmVmZXJlbmNlc1xuICAgICAgY29uc3QgYXZhaWxhYmxlU29uZ3MgPSBzb25nc0RhdGEuZmlsdGVyKChzb25nKSA9PiB7XG4gICAgICAgIHJldHVybiAhZXhjbHVkZVNvbmdzLmhhcyhzb25nLmZpbGVfaWQudG9TdHJpbmcoKSk7XG4gICAgICB9KTtcblxuICAgICAgY29uc29sZS5sb2coYPCfjrUgQXZhaWxhYmxlIHNvbmdzIGZvciBzbWFydCByZWNvbW1lbmRhdGlvbnM6ICR7YXZhaWxhYmxlU29uZ3MubGVuZ3RofWApO1xuXG4gICAgICBpZiAoYXZhaWxhYmxlU29uZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIE5vIGF2YWlsYWJsZSBzb25ncyBhZnRlciBmaWx0ZXJpbmcnKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICAvLyBTY29yZSBzb25ncyBiYXNlZCBvbiB1c2VyJ3MgbGlzdGVuaW5nIHByZWZlcmVuY2VzXG4gICAgICBjb25zdCBzY29yZWRTb25ncyA9IGF2YWlsYWJsZVNvbmdzLm1hcCgoc29uZykgPT4ge1xuICAgICAgICBsZXQgc2NvcmUgPSAwO1xuXG4gICAgICAgIC8vIEhpZ2ggcHJpb3JpdHk6IFRhZyBtYXRjaGluZyB3aXRoIGxpc3RlbmVkIHNvbmdzXG4gICAgICAgIGNvbnN0IHNvbmdUYWdzID0gc29uZy50YWdzPy5tYXAoKHRhZzogc3RyaW5nKSA9PiB0YWcudG9Mb3dlckNhc2UoKSkgfHwgW107XG4gICAgICAgIGNvbnN0IG1hdGNoaW5nVGFncyA9IHNvbmdUYWdzLmZpbHRlcigodGFnOiBzdHJpbmcpID0+IHByZWZlcnJlZFRhZ3MuaGFzKHRhZykpO1xuICAgICAgICBzY29yZSArPSBtYXRjaGluZ1RhZ3MubGVuZ3RoICogMjU7IC8vIEhpZ2hlciB3ZWlnaHQgZm9yIHRhZyBtYXRjaGluZ1xuXG4gICAgICAgIC8vIEhpZ2ggcHJpb3JpdHk6IEFydGlzdCBtYXRjaGluZyB3aXRoIGxpc3RlbmVkIHNvbmdzXG4gICAgICAgIGlmIChwcmVmZXJyZWRBcnRpc3RzLmhhcyhzb25nLmFydGlzdC50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgIHNjb3JlICs9IDMwOyAvLyBIaWdoZXIgd2VpZ2h0IGZvciBhcnRpc3QgbWF0Y2hpbmdcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1lZGl1bSBwcmlvcml0eTogU2FtZSBsYW5ndWFnZSBhcyBsaXN0ZW5lZCBzb25nc1xuICAgICAgICBjb25zdCBsaXN0ZW5lZExhbmd1YWdlcyA9IGxpc3RlbmVkU29uZ3NJbkJhdGNoLm1hcChzID0+IHMubGFuZ3VhZ2UpO1xuICAgICAgICBpZiAobGlzdGVuZWRMYW5ndWFnZXMuaW5jbHVkZXMoc29uZy5sYW5ndWFnZSkpIHtcbiAgICAgICAgICBzY29yZSArPSAxNTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIExvd2VyIHByaW9yaXR5OiBHZW5lcmFsIHBvcHVsYXJpdHlcbiAgICAgICAgc2NvcmUgKz0gTWF0aC5sb2coMSArIChzb25nLmxpa2VzIHx8IDApKSAqIDI7XG4gICAgICAgIHNjb3JlICs9IE1hdGgubG9nKDEgKyAoc29uZy52aWV3cyB8fCAwKSkgKiAxO1xuXG4gICAgICAgIC8vIEJvbnVzIGZvciBsaWtlZCBzb25nc1xuICAgICAgICBpZiAodXNlckxpa2VkU29uZ3MuaGFzKHNvbmcuZmlsZV9pZCkpIHtcbiAgICAgICAgICBzY29yZSArPSAxMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCBzbWFsbCByYW5kb21uZXNzIHRvIGF2b2lkIHJlcGV0aXRpb25cbiAgICAgICAgc2NvcmUgKz0gTWF0aC5yYW5kb20oKSAqIDI7XG5cbiAgICAgICAgcmV0dXJuIHsgXG4gICAgICAgICAgc29uZzogY29udmVydERhdGFiYXNlU29uZyhzb25nLCB1c2VyTGlrZWRTb25ncy5oYXMoc29uZy5maWxlX2lkKSksIFxuICAgICAgICAgIHNjb3JlIFxuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFNvcnQgYnkgc2NvcmUgYW5kIHJldHVybiB0b3AgcmVjb21tZW5kYXRpb25zXG4gICAgICBjb25zdCByZWNvbW1lbmRhdGlvbnMgPSBzY29yZWRTb25nc1xuICAgICAgICAuc29ydCgoYSwgYikgPT4gYi5zY29yZSAtIGEuc2NvcmUpXG4gICAgICAgIC5zbGljZSgwLCAxNSkgLy8gR2V0IG1vcmUgc29uZ3MgZm9yIHZhcmlldHlcbiAgICAgICAgLm1hcChlbnRyeSA9PiBlbnRyeS5zb25nKTtcblxuICAgICAgY29uc29sZS5sb2coJ/Cfp6AgU21hcnQgcmVjb21tZW5kYXRpb25zIGJhc2VkIG9uIGxpc3RlbmluZyBiZWhhdmlvcjonLCBcbiAgICAgICAgcmVjb21tZW5kYXRpb25zLnNsaWNlKDAsIDUpLm1hcChzID0+IGAke3MubmFtZX0gYnkgJHtzLmFydGlzdH1gKSk7XG4gICAgICBcbiAgICAgIHJldHVybiByZWNvbW1lbmRhdGlvbnM7XG4gICAgICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGluIGdldFNtYXJ0UGVyc29uYWxpemVkU29uZ3M6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfTtcblxuICAvLyBDb252ZXJ0IGRhdGFiYXNlIHNvbmcgdG8gVUkgc29uZyBmb3JtYXRcbiAgY29uc3QgY29udmVydERhdGFiYXNlU29uZyA9IChkYlNvbmc6IERhdGFiYXNlU29uZywgaXNMaWtlZDogYm9vbGVhbiA9IGZhbHNlKTogU29uZyA9PiAoe1xuICAgIGZpbGVfaWQ6IGRiU29uZy5maWxlX2lkLFxuICAgIGltZ19pZDogZGJTb25nLmltZ19pZCxcbiAgICBuYW1lOiBkYlNvbmcubmFtZSxcbiAgICBhcnRpc3Q6IGRiU29uZy5hcnRpc3QsXG4gICAgbGFuZ3VhZ2U6IGRiU29uZy5sYW5ndWFnZSxcbiAgICB0YWdzOiBkYlNvbmcudGFncyxcbiAgICB2aWV3czogZGJTb25nLnZpZXdzLFxuICAgIGxpa2VzOiBkYlNvbmcubGlrZXMsXG4gICAgaWQ6IGRiU29uZy5maWxlX2lkLnRvU3RyaW5nKCksXG4gICAgaW1hZ2U6IGBodHRwczovL2ltYWdlcy5wZXhlbHMuY29tL3Bob3Rvcy8ke2RiU29uZy5pbWdfaWR9L3BleGVscy1waG90by0ke2RiU29uZy5pbWdfaWR9LmpwZWc/YXV0bz1jb21wcmVzcyZjcz10aW55c3JnYiZ3PTMwMGAsXG4gICAgaXNMaWtlZFxuICB9KVxuXG4gIC8vIEZldGNoIGFsbCBzb25nc1xuICBjb25zdCBmZXRjaFNvbmdzID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmICghdXNlcikge1xuICAgICAgc2V0U29uZ3MoW10pXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YTogc29uZ3NEYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3NvbmdzJylcbiAgICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAgIC5vcmRlcigndmlld3MnLCB7IGFzY2VuZGluZzogZmFsc2UgfSlcblxuICAgICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvclxuXG4gICAgICBsZXQgdXNlckxpa2VkU29uZ3MgPSBuZXcgU2V0PG51bWJlcj4oKVxuICAgICAgXG4gICAgICBjb25zdCB7IGRhdGE6IGxpa2VkRGF0YSB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ2xpa2VkX3NvbmdzJylcbiAgICAgICAgLnNlbGVjdCgnc29uZ19pZCcpXG4gICAgICAgIC5lcSgndXNlcl9pZCcsIHVzZXIuaWQpXG4gICAgICBcbiAgICAgIGlmIChsaWtlZERhdGEpIHtcbiAgICAgICAgdXNlckxpa2VkU29uZ3MgPSBuZXcgU2V0KGxpa2VkRGF0YS5tYXAoaXRlbSA9PiBpdGVtLnNvbmdfaWQpKVxuICAgICAgICBzZXRMaWtlZFNvbmdzKHVzZXJMaWtlZFNvbmdzKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBjb252ZXJ0ZWRTb25ncyA9IHNvbmdzRGF0YT8ubWFwKHNvbmcgPT4gXG4gICAgICAgIGNvbnZlcnREYXRhYmFzZVNvbmcoc29uZywgdXNlckxpa2VkU29uZ3MuaGFzKHNvbmcuZmlsZV9pZCkpXG4gICAgICApIHx8IFtdXG5cbiAgICAgIGNvbnN0IHNvcnRlZFNvbmdzID0gWy4uLmNvbnZlcnRlZFNvbmdzXS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIGNvbnN0IGFTY29yZSA9IGEudmlld3MgKyBhLmxpa2VzO1xuICAgICAgICBjb25zdCBiU2NvcmUgPSBiLnZpZXdzICsgYi5saWtlcztcbiAgICAgICAgcmV0dXJuIGJTY29yZSAtIGFTY29yZTtcbiAgICAgIH0pO1xuXG4gICAgICBzZXRTb25ncyhzb3J0ZWRTb25ncyk7XG5cbiAgICAgIGNvbnN0IHsgZGF0YTogdXNlckRhdGEgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCd1c2VycycpXG4gICAgICAgIC5zZWxlY3QoJ2xhc3Rfc29uZ19maWxlX2lkJylcbiAgICAgICAgLmVxKCdpZCcsIHVzZXIuaWQpXG4gICAgICAgIC5zaW5nbGUoKVxuXG4gICAgICBpZiAodXNlckRhdGE/Lmxhc3Rfc29uZ19maWxlX2lkKSB7XG4gICAgICAgIGNvbnN0IGxhc3RTb25nID0gY29udmVydGVkU29uZ3MuZmluZChzb25nID0+IHNvbmcuZmlsZV9pZCA9PT0gdXNlckRhdGEubGFzdF9zb25nX2ZpbGVfaWQpXG4gICAgICAgIGlmIChsYXN0U29uZykge1xuICAgICAgICAgIHNldExhc3RQbGF5ZWRTb25nKGxhc3RTb25nKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHNvbmdzOicsIGVycm9yKVxuICAgICAgc2V0U29uZ3MoW10pIC8vIFNldCBlbXB0eSBhcnJheSBvbiBlcnJvclxuICAgIH1cbiAgfVxuXG4gIC8vIEdldCBwZXJzb25hbGl6ZWQgc29uZ3Mgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcgYW5kIGZpbHRlcmluZ1xuICBjb25zdCBnZXRQZXJzb25hbGl6ZWRTb25ncyA9IGFzeW5jICh1c2VySWQ6IHN0cmluZywgY3VycmVudFNvbmc6IFNvbmcsIGxpc3RlbmVkU29uZ3M/OiBTZXQ8c3RyaW5nPik6IFByb21pc2U8U29uZ1tdPiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKCfwn461IEZldGNoaW5nIHBlcnNvbmFsaXplZCBzb25ncyBmb3I6JywgY3VycmVudFNvbmcubmFtZSk7XG4gICAgICBjb25zb2xlLmxvZygn8J+OtSBMaXN0ZW5lZCBzb25ncyBjb3VudDonLCBsaXN0ZW5lZFNvbmdzPy5zaXplIHx8IDApO1xuICAgICAgXG4gICAgICAvLyAxLiBGZXRjaCBhbGwgc29uZ3MgZnJvbSBkYXRhYmFzZVxuICAgICAgY29uc3QgeyBkYXRhOiBzb25nc0RhdGEsIGVycm9yOiBzb25nc0Vycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnc29uZ3MnKVxuICAgICAgICAuc2VsZWN0KCcqJyk7XG4gICAgICBcbiAgICAgIGlmIChzb25nc0Vycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBmZXRjaGluZyBzb25ncyBmb3IgcGVyc29uYWxpemF0aW9uOicsIHNvbmdzRXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmICghc29uZ3NEYXRhIHx8IHNvbmdzRGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gTm8gc29uZ3MgZm91bmQgaW4gZGF0YWJhc2UnKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICAvLyAyLiBGZXRjaCB1c2VyJ3MgbGlzdGVuaW5nIGhpc3RvcnlcbiAgICAgIGNvbnN0IHsgZGF0YTogaGlzdG9yeURhdGEsIGVycm9yOiBoaXN0b3J5RXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdoaXN0b3J5JylcbiAgICAgICAgLnNlbGVjdCgnc29uZ19pZCwgbWludXRlc19saXN0ZW5lZCcpXG4gICAgICAgIC5lcSgndXNlcl9pZCcsIHVzZXJJZCk7XG4gICAgICBcbiAgICAgIGlmIChoaXN0b3J5RXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGZldGNoaW5nIGhpc3Rvcnk6JywgaGlzdG9yeUVycm9yKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgaGlzdG9yeU1hcCA9IG5ldyBNYXA8bnVtYmVyLCBudW1iZXI+KCk7XG4gICAgICBpZiAoaGlzdG9yeURhdGEpIHtcbiAgICAgICAgaGlzdG9yeURhdGEuZm9yRWFjaChoID0+IGhpc3RvcnlNYXAuc2V0KGguc29uZ19pZCwgaC5taW51dGVzX2xpc3RlbmVkIHx8IDApKTtcbiAgICAgIH1cblxuICAgICAgLy8gMy4gR2V0IHVzZXIncyBsaWtlZCBzb25nc1xuICAgICAgY29uc3QgeyBkYXRhOiBsaWtlZERhdGEgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdsaWtlZF9zb25ncycpXG4gICAgICAgIC5zZWxlY3QoJ3NvbmdfaWQnKVxuICAgICAgICAuZXEoJ3VzZXJfaWQnLCB1c2VySWQpO1xuICAgICAgXG4gICAgICBjb25zdCB1c2VyTGlrZWRTb25ncyA9IG5ldyBTZXQ8bnVtYmVyPigpO1xuICAgICAgaWYgKGxpa2VkRGF0YSkge1xuICAgICAgICBsaWtlZERhdGEuZm9yRWFjaChpdGVtID0+IHVzZXJMaWtlZFNvbmdzLmFkZChpdGVtLnNvbmdfaWQpKTtcbiAgICAgIH1cblxuICAgICAgLy8gNC4gRmlsdGVyIGFuZCBzY29yZSBzb25nc1xuICAgICAgY29uc3QgYXZhaWxhYmxlU29uZ3MgPSBzb25nc0RhdGEuZmlsdGVyKChzb25nKSA9PiB7XG4gICAgICAgIC8vIEV4Y2x1ZGUgY3VycmVudCBzb25nXG4gICAgICAgIGlmIChzb25nLmZpbGVfaWQgPT09IGN1cnJlbnRTb25nLmZpbGVfaWQpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEV4Y2x1ZGUgbGlzdGVuZWQgc29uZ3MgaWYgcHJvdmlkZWRcbiAgICAgICAgaWYgKGxpc3RlbmVkU29uZ3MgJiYgbGlzdGVuZWRTb25ncy5oYXMoc29uZy5maWxlX2lkLnRvU3RyaW5nKCkpKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYPCfmqsgRXhjbHVkaW5nIGxpc3RlbmVkIHNvbmc6ICR7c29uZy5uYW1lfSBieSAke3NvbmcuYXJ0aXN0fWApO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KTtcblxuICAgICAgY29uc29sZS5sb2coYPCfjrUgQXZhaWxhYmxlIHNvbmdzIGFmdGVyIGZpbHRlcmluZzogJHthdmFpbGFibGVTb25ncy5sZW5ndGh9YCk7XG5cbiAgICAgIGlmIChhdmFpbGFibGVTb25ncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gTm8gYXZhaWxhYmxlIHNvbmdzIGFmdGVyIGZpbHRlcmluZycpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG5cbiAgICAgIC8vIDUuIFNjb3JlIGFuZCBzb3J0IHNvbmdzXG4gICAgICBjb25zdCBzY29yZWRTb25ncyA9IGF2YWlsYWJsZVNvbmdzLm1hcCgoc29uZykgPT4ge1xuICAgICAgICBsZXQgc2NvcmUgPSAwO1xuXG4gICAgICAgIC8vIFRhZyBtYXRjaGluZyAoaGlnaGVzdCBwcmlvcml0eSlcbiAgICAgICAgY29uc3QgbWF0Y2hpbmdUYWdzID0gc29uZy50YWdzPy5maWx0ZXIoKHRhZzogc3RyaW5nKSA9PlxuICAgICAgICAgIGN1cnJlbnRTb25nLnRhZ3M/LmluY2x1ZGVzKHRhZylcbiAgICAgICAgKSB8fCBbXTtcbiAgICAgICAgc2NvcmUgKz0gbWF0Y2hpbmdUYWdzLmxlbmd0aCAqIDE1O1xuXG4gICAgICAgIC8vIEFydGlzdCBtYXRjaGluZ1xuICAgICAgICBpZiAoc29uZy5hcnRpc3QgPT09IGN1cnJlbnRTb25nLmFydGlzdCkge1xuICAgICAgICAgIHNjb3JlICs9IDI1O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTGFuZ3VhZ2UgbWF0Y2hpbmdcbiAgICAgICAgaWYgKHNvbmcubGFuZ3VhZ2UgPT09IGN1cnJlbnRTb25nLmxhbmd1YWdlKSB7XG4gICAgICAgICAgc2NvcmUgKz0gMTA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBMaXN0ZW5pbmcgaGlzdG9yeSBib29zdFxuICAgICAgICBjb25zdCBsaXN0ZW5lZE1pbnV0ZXMgPSBoaXN0b3J5TWFwLmdldChzb25nLmZpbGVfaWQpIHx8IDA7XG4gICAgICAgIHNjb3JlICs9IE1hdGgubWluKGxpc3RlbmVkTWludXRlcyAqIDIsIDIwKTsgLy8gQ2FwIGF0IDIwIHBvaW50c1xuXG4gICAgICAgIC8vIFBvcHVsYXJpdHkgYm9vc3QgKGxpa2VzIGFuZCB2aWV3cylcbiAgICAgICAgc2NvcmUgKz0gTWF0aC5sb2coMSArIChzb25nLmxpa2VzIHx8IDApKSAqIDI7XG4gICAgICAgIHNjb3JlICs9IE1hdGgubG9nKDEgKyAoc29uZy52aWV3cyB8fCAwKSkgKiAxO1xuXG4gICAgICAgIC8vIExpa2VkIHNvbmdzIGJvb3N0XG4gICAgICAgIGlmICh1c2VyTGlrZWRTb25ncy5oYXMoc29uZy5maWxlX2lkKSkge1xuICAgICAgICAgIHNjb3JlICs9IDg7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgY29udHJvbGxlZCByYW5kb21uZXNzIHRvIGF2b2lkIHJlcGV0aXRpb25cbiAgICAgICAgc2NvcmUgKz0gTWF0aC5yYW5kb20oKSAqIDM7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzb25nOiBjb252ZXJ0RGF0YWJhc2VTb25nKHNvbmcsIHVzZXJMaWtlZFNvbmdzLmhhcyhzb25nLmZpbGVfaWQpKSxcbiAgICAgICAgICBzY29yZVxuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIC8vIDYuIFNvcnQgYnkgc2NvcmUgYW5kIHJldHVybiB0b3AgcmVjb21tZW5kYXRpb25zXG4gICAgICBjb25zdCByZWNvbW1lbmRhdGlvbnMgPSBzY29yZWRTb25nc1xuICAgICAgICAuc29ydCgoYSwgYikgPT4gYi5zY29yZSAtIGEuc2NvcmUpXG4gICAgICAgIC5zbGljZSgwLCAxMCkgLy8gR2V0IG1vcmUgc29uZ3MgdG8gaGF2ZSBhIGJ1ZmZlclxuICAgICAgICAubWFwKGVudHJ5ID0+IGVudHJ5LnNvbmcpO1xuXG4gICAgICBjb25zb2xlLmxvZygn8J+OtSBQZXJzb25hbGl6ZWQgcmVjb21tZW5kYXRpb25zOicsIHJlY29tbWVuZGF0aW9ucy5zbGljZSgwLCA1KS5tYXAocyA9PiBgJHtzLm5hbWV9IGJ5ICR7cy5hcnRpc3R9YCkpO1xuICAgICAgY29uc29sZS5sb2coJ/CfjrUgVG90YWwgYXZhaWxhYmxlIHNvbmdzOicsIGF2YWlsYWJsZVNvbmdzLmxlbmd0aCk7XG4gICAgICBcbiAgICAgIHJldHVybiByZWNvbW1lbmRhdGlvbnM7XG4gICAgICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGluIGdldFBlcnNvbmFsaXplZFNvbmdzOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH07XG5cbiAgLy8gR2V0IHBlcnNvbmFsaXplZCBzb25ncyBiYXNlZCBvbiB1c2VyJ3MgdG9wIDEwIGhpc3RvcnlcbiAgY29uc3QgZmV0Y2hQZXJzb25hbGl6ZWRTb25ncyA9IGFzeW5jICgpID0+IHtcbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIHNldFBlcnNvbmFsaXplZFNvbmdzKFtdKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKCfwn46vIEZldGNoaW5nIHBlcnNvbmFsaXplZCBzb25ncyBiYXNlZCBvbiBsaXN0ZW5pbmcgaGlzdG9yeScpO1xuICAgICAgXG4gICAgICAvLyAxLiBHZXQgdXNlcidzIHRvcCAxMCBzb25ncyBmcm9tIGhpc3RvcnlcbiAgICAgIGNvbnN0IHsgZGF0YTogaGlzdG9yeURhdGEsIGVycm9yOiBoaXN0b3J5RXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdoaXN0b3J5JylcbiAgICAgICAgLnNlbGVjdChgXG4gICAgICAgICAgc29uZ19pZCxcbiAgICAgICAgICBtaW51dGVzX2xpc3RlbmVkLFxuICAgICAgICAgIHNvbmdzICgqKVxuICAgICAgICBgKVxuICAgICAgICAuZXEoJ3VzZXJfaWQnLCB1c2VyLmlkKVxuICAgICAgICAub3JkZXIoJ21pbnV0ZXNfbGlzdGVuZWQnLCB7IGFzY2VuZGluZzogZmFsc2UgfSlcbiAgICAgICAgLmxpbWl0KDEwKVxuXG4gICAgICBpZiAoaGlzdG9yeUVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBmZXRjaGluZyBoaXN0b3J5IGZvciBwZXJzb25hbGl6YXRpb246JywgaGlzdG9yeUVycm9yKVxuICAgICAgICBzZXRQZXJzb25hbGl6ZWRTb25ncyhbXSlcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmICghaGlzdG9yeURhdGEgfHwgaGlzdG9yeURhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfimqDvuI8gTm8gbGlzdGVuaW5nIGhpc3RvcnkgZm91bmQsIHVzaW5nIHRyZW5kaW5nIHNvbmdzJylcbiAgICAgICAgLy8gRmFsbGJhY2sgdG8gdHJlbmRpbmcgc29uZ3MgaWYgbm8gaGlzdG9yeVxuICAgICAgICBjb25zdCB7IGRhdGE6IHRyZW5kaW5nU29uZ3MgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgICAgLmZyb20oJ3NvbmdzJylcbiAgICAgICAgICAuc2VsZWN0KCcqJylcbiAgICAgICAgICAub3JkZXIoJ3ZpZXdzJywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pXG4gICAgICAgICAgLmxpbWl0KDIwKVxuICAgICAgICBcbiAgICAgICAgaWYgKHRyZW5kaW5nU29uZ3MpIHtcbiAgICAgICAgICBjb25zdCB7IGRhdGE6IGxpa2VkRGF0YSB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgICAgIC5mcm9tKCdsaWtlZF9zb25ncycpXG4gICAgICAgICAgICAuc2VsZWN0KCdzb25nX2lkJylcbiAgICAgICAgICAgIC5lcSgndXNlcl9pZCcsIHVzZXIuaWQpXG4gICAgICAgICAgXG4gICAgICAgICAgY29uc3QgdXNlckxpa2VkU29uZ3MgPSBuZXcgU2V0PG51bWJlcj4oKVxuICAgICAgICAgIGlmIChsaWtlZERhdGEpIHtcbiAgICAgICAgICAgIGxpa2VkRGF0YS5mb3JFYWNoKGl0ZW0gPT4gdXNlckxpa2VkU29uZ3MuYWRkKGl0ZW0uc29uZ19pZCkpXG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IGNvbnZlcnRlZCA9IHRyZW5kaW5nU29uZ3MubWFwKHNvbmcgPT4gXG4gICAgICAgICAgICBjb252ZXJ0RGF0YWJhc2VTb25nKHNvbmcsIHVzZXJMaWtlZFNvbmdzLmhhcyhzb25nLmZpbGVfaWQpKVxuICAgICAgICAgIClcbiAgICAgICAgICBzZXRQZXJzb25hbGl6ZWRTb25ncyhjb252ZXJ0ZWQpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIC8vIDIuIEV4dHJhY3QgY29tbW9uIHRhZ3MgYW5kIGFydGlzdHMgZnJvbSB0b3Agc29uZ3NcbiAgICAgIGNvbnN0IHRvcFNvbmdzID0gaGlzdG9yeURhdGFcbiAgICAgICAgLmZpbHRlcihpdGVtID0+IGl0ZW0uc29uZ3MpXG4gICAgICAgIC5tYXAoaXRlbSA9PiBpdGVtLnNvbmdzKVxuICAgICAgXG4gICAgICBjb25zdCB0YWdDb3VudHMgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpXG4gICAgICBjb25zdCBhcnRpc3RDb3VudHMgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpXG4gICAgICBjb25zdCBoaXN0b3J5U29uZ0lkcyA9IG5ldyBTZXQ8bnVtYmVyPigpXG4gICAgICBcbiAgICAgIHRvcFNvbmdzLmZvckVhY2goc29uZyA9PiB7XG4gICAgICAgIGhpc3RvcnlTb25nSWRzLmFkZChzb25nLmZpbGVfaWQpXG4gICAgICAgIFxuICAgICAgICAvLyBDb3VudCB0YWdzXG4gICAgICAgIGlmIChzb25nLnRhZ3MgJiYgQXJyYXkuaXNBcnJheShzb25nLnRhZ3MpKSB7XG4gICAgICAgICAgc29uZy50YWdzLmZvckVhY2goKHRhZzogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkVGFnID0gdGFnLnRvTG93ZXJDYXNlKCkudHJpbSgpXG4gICAgICAgICAgICB0YWdDb3VudHMuc2V0KG5vcm1hbGl6ZWRUYWcsICh0YWdDb3VudHMuZ2V0KG5vcm1hbGl6ZWRUYWcpIHx8IDApICsgMSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBDb3VudCBhcnRpc3RzXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRBcnRpc3QgPSBzb25nLmFydGlzdC50b0xvd2VyQ2FzZSgpLnRyaW0oKVxuICAgICAgICBhcnRpc3RDb3VudHMuc2V0KG5vcm1hbGl6ZWRBcnRpc3QsIChhcnRpc3RDb3VudHMuZ2V0KG5vcm1hbGl6ZWRBcnRpc3QpIHx8IDApICsgMSlcbiAgICAgIH0pXG5cbiAgICAgIC8vIEdldCBtb3N0IGNvbW1vbiB0YWdzIGFuZCBhcnRpc3RzXG4gICAgICBjb25zdCBjb21tb25UYWdzID0gQXJyYXkuZnJvbSh0YWdDb3VudHMuZW50cmllcygpKVxuICAgICAgICAuc29ydCgoYSwgYikgPT4gYlsxXSAtIGFbMV0pXG4gICAgICAgIC5zbGljZSgwLCA1KVxuICAgICAgICAubWFwKChbdGFnXSkgPT4gdGFnKVxuICAgICAgXG4gICAgICBjb25zdCBjb21tb25BcnRpc3RzID0gQXJyYXkuZnJvbShhcnRpc3RDb3VudHMuZW50cmllcygpKVxuICAgICAgICAuc29ydCgoYSwgYikgPT4gYlsxXSAtIGFbMV0pXG4gICAgICAgIC5zbGljZSgwLCAzKVxuICAgICAgICAubWFwKChbYXJ0aXN0XSkgPT4gYXJ0aXN0KVxuXG4gICAgICBjb25zb2xlLmxvZygn8J+Pt++4jyBDb21tb24gdGFncyBmcm9tIGhpc3Rvcnk6JywgY29tbW9uVGFncylcbiAgICAgIGNvbnNvbGUubG9nKCfwn46kIENvbW1vbiBhcnRpc3RzIGZyb20gaGlzdG9yeTonLCBjb21tb25BcnRpc3RzKVxuXG4gICAgICAvLyAzLiBGZXRjaCBhbGwgc29uZ3MgYW5kIGZpbHRlciBvdXQgaGlzdG9yeSBzb25nc1xuICAgICAgY29uc3QgeyBkYXRhOiBhbGxTb25ncywgZXJyb3I6IHNvbmdzRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdzb25ncycpXG4gICAgICAgIC5zZWxlY3QoJyonKVxuXG4gICAgICBpZiAoc29uZ3NFcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgZmV0Y2hpbmcgc29uZ3MgZm9yIHBlcnNvbmFsaXphdGlvbjonLCBzb25nc0Vycm9yKVxuICAgICAgICBzZXRQZXJzb25hbGl6ZWRTb25ncyhbXSlcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmICghYWxsU29uZ3MgfHwgYWxsU29uZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHNldFBlcnNvbmFsaXplZFNvbmdzKFtdKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gNC4gR2V0IHVzZXIncyBsaWtlZCBzb25nc1xuICAgICAgY29uc3QgeyBkYXRhOiBsaWtlZERhdGEgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdsaWtlZF9zb25ncycpXG4gICAgICAgIC5zZWxlY3QoJ3NvbmdfaWQnKVxuICAgICAgICAuZXEoJ3VzZXJfaWQnLCB1c2VyLmlkKVxuICAgICAgXG4gICAgICBjb25zdCB1c2VyTGlrZWRTb25ncyA9IG5ldyBTZXQ8bnVtYmVyPigpXG4gICAgICBpZiAobGlrZWREYXRhKSB7XG4gICAgICAgIGxpa2VkRGF0YS5mb3JFYWNoKGl0ZW0gPT4gdXNlckxpa2VkU29uZ3MuYWRkKGl0ZW0uc29uZ19pZCkpXG4gICAgICB9XG5cbiAgICAgIC8vIDUuIEZpbHRlciBhbmQgc2NvcmUgc29uZ3NcbiAgICAgIGNvbnN0IGF2YWlsYWJsZVNvbmdzID0gYWxsU29uZ3MuZmlsdGVyKHNvbmcgPT4gXG4gICAgICAgICFoaXN0b3J5U29uZ0lkcy5oYXMoc29uZy5maWxlX2lkKSAvLyBFeGNsdWRlIHNvbmdzIGZyb20gaGlzdG9yeVxuICAgICAgKVxuXG4gICAgICBjb25zb2xlLmxvZyhg8J+OtSBBdmFpbGFibGUgc29uZ3MgYWZ0ZXIgZmlsdGVyaW5nIGhpc3Rvcnk6ICR7YXZhaWxhYmxlU29uZ3MubGVuZ3RofWApXG5cbiAgICAgIGlmIChhdmFpbGFibGVTb25ncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgc2V0UGVyc29uYWxpemVkU29uZ3MoW10pXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyA2LiBTY29yZSBzb25ncyBiYXNlZCBvbiBjb21tb24gdGFncyBhbmQgYXJ0aXN0c1xuICAgICAgY29uc3Qgc2NvcmVkU29uZ3MgPSBhdmFpbGFibGVTb25ncy5tYXAoc29uZyA9PiB7XG4gICAgICAgIGxldCBzY29yZSA9IDBcblxuICAgICAgICAvLyBTY29yZSBiYXNlZCBvbiBjb21tb24gdGFncyAoaGlnaGVzdCBwcmlvcml0eSlcbiAgICAgICAgaWYgKHNvbmcudGFncyAmJiBBcnJheS5pc0FycmF5KHNvbmcudGFncykpIHtcbiAgICAgICAgICBjb25zdCBzb25nVGFncyA9IHNvbmcudGFncy5tYXAoKHRhZzogc3RyaW5nKSA9PiB0YWcudG9Mb3dlckNhc2UoKS50cmltKCkpXG4gICAgICAgICAgY29uc3QgbWF0Y2hpbmdUYWdzID0gc29uZ1RhZ3MuZmlsdGVyKHRhZyA9PiBjb21tb25UYWdzLmluY2x1ZGVzKHRhZykpXG4gICAgICAgICAgc2NvcmUgKz0gbWF0Y2hpbmdUYWdzLmxlbmd0aCAqIDIwIC8vIEhpZ2ggd2VpZ2h0IGZvciB0YWcgbWF0Y2hpbmdcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNjb3JlIGJhc2VkIG9uIGNvbW1vbiBhcnRpc3RzXG4gICAgICAgIGNvbnN0IHNvbmdBcnRpc3QgPSBzb25nLmFydGlzdC50b0xvd2VyQ2FzZSgpLnRyaW0oKVxuICAgICAgICBpZiAoY29tbW9uQXJ0aXN0cy5pbmNsdWRlcyhzb25nQXJ0aXN0KSkge1xuICAgICAgICAgIHNjb3JlICs9IDI1IC8vIEhpZ2ggd2VpZ2h0IGZvciBhcnRpc3QgbWF0Y2hpbmdcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJvbnVzIGZvciBsaWtlZCBzb25nc1xuICAgICAgICBpZiAodXNlckxpa2VkU29uZ3MuaGFzKHNvbmcuZmlsZV9pZCkpIHtcbiAgICAgICAgICBzY29yZSArPSAxMFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2VuZXJhbCBwb3B1bGFyaXR5IGJvb3N0IChsb3dlciB3ZWlnaHQpXG4gICAgICAgIHNjb3JlICs9IE1hdGgubG9nKDEgKyAoc29uZy5saWtlcyB8fCAwKSkgKiAyXG4gICAgICAgIHNjb3JlICs9IE1hdGgubG9nKDEgKyAoc29uZy52aWV3cyB8fCAwKSkgKiAxXG5cbiAgICAgICAgLy8gQWRkIHNtYWxsIHJhbmRvbW5lc3MgdG8gYXZvaWQgcmVwZXRpdGlvblxuICAgICAgICBzY29yZSArPSBNYXRoLnJhbmRvbSgpICogM1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc29uZzogY29udmVydERhdGFiYXNlU29uZyhzb25nLCB1c2VyTGlrZWRTb25ncy5oYXMoc29uZy5maWxlX2lkKSksXG4gICAgICAgICAgc2NvcmVcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgLy8gNy4gU29ydCBieSBzY29yZSBhbmQgcmV0dXJuIHRvcCByZWNvbW1lbmRhdGlvbnNcbiAgICAgIGNvbnN0IHJlY29tbWVuZGF0aW9ucyA9IHNjb3JlZFNvbmdzXG4gICAgICAgIC5zb3J0KChhLCBiKSA9PiBiLnNjb3JlIC0gYS5zY29yZSlcbiAgICAgICAgLnNsaWNlKDAsIDMwKSAvLyBHZXQgdG9wIDMwIHBlcnNvbmFsaXplZCBzb25nc1xuICAgICAgICAubWFwKGVudHJ5ID0+IGVudHJ5LnNvbmcpXG5cbiAgICAgIGNvbnNvbGUubG9nKCfwn46vIFBlcnNvbmFsaXplZCByZWNvbW1lbmRhdGlvbnM6JywgcmVjb21tZW5kYXRpb25zLnNsaWNlKDAsIDUpLm1hcChzID0+IGAke3MubmFtZX0gYnkgJHtzLmFydGlzdH1gKSlcbiAgICAgIHNldFBlcnNvbmFsaXplZFNvbmdzKHJlY29tbWVuZGF0aW9ucylcbiAgICAgIFxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgaW4gZmV0Y2hQZXJzb25hbGl6ZWRTb25nczonLCBlcnJvcilcbiAgICAgIHNldFBlcnNvbmFsaXplZFNvbmdzKFtdKVxuICAgIH1cbiAgfVxuXG4gIC8vIEZldGNoIHJlY2VudGx5IHBsYXllZCBzb25ncyBiYXNlZCBvbiBsaXN0ZW5pbmcgaGlzdG9yeVxuICBjb25zdCBmZXRjaFJlY2VudGx5UGxheWVkID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmICghdXNlcikge1xuICAgICAgc2V0UmVjZW50bHlQbGF5ZWRTb25ncyhbXSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyBHZXQgdXNlcidzIGxpc3RlbmluZyBoaXN0b3J5IHNvcnRlZCBieSBtaW51dGVzIGxpc3RlbmVkXG4gICAgICBjb25zdCB7IGRhdGE6IGhpc3RvcnlEYXRhLCBlcnJvcjogaGlzdG9yeUVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnaGlzdG9yeScpXG4gICAgICAgIC5zZWxlY3QoYFxuICAgICAgICAgIHNvbmdfaWQsXG4gICAgICAgICAgbWludXRlc19saXN0ZW5lZCxcbiAgICAgICAgICBzb25ncyAoKilcbiAgICAgICAgYClcbiAgICAgICAgLmVxKCd1c2VyX2lkJywgdXNlci5pZClcbiAgICAgICAgLm9yZGVyKCdtaW51dGVzX2xpc3RlbmVkJywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pXG4gICAgICAgIC5saW1pdCg5KVxuXG4gICAgICBpZiAoaGlzdG9yeUVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHJlY2VudGx5IHBsYXllZDonLCBoaXN0b3J5RXJyb3IpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoIWhpc3RvcnlEYXRhIHx8IGhpc3RvcnlEYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBzZXRSZWNlbnRseVBsYXllZFNvbmdzKFtdKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gR2V0IHVzZXIncyBsaWtlZCBzb25ncyBmb3IgcHJvcGVyIGNvbnZlcnNpb25cbiAgICAgIGNvbnN0IHsgZGF0YTogbGlrZWREYXRhIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnbGlrZWRfc29uZ3MnKVxuICAgICAgICAuc2VsZWN0KCdzb25nX2lkJylcbiAgICAgICAgLmVxKCd1c2VyX2lkJywgdXNlci5pZClcbiAgICAgIFxuICAgICAgY29uc3QgdXNlckxpa2VkU29uZ3MgPSBuZXcgU2V0PG51bWJlcj4oKVxuICAgICAgaWYgKGxpa2VkRGF0YSkge1xuICAgICAgICBsaWtlZERhdGEuZm9yRWFjaChpdGVtID0+IHVzZXJMaWtlZFNvbmdzLmFkZChpdGVtLnNvbmdfaWQpKVxuICAgICAgfVxuXG4gICAgICAvLyBDb252ZXJ0IHRvIFNvbmcgZm9ybWF0XG4gICAgICBjb25zdCByZWNlbnRTb25ncyA9IGhpc3RvcnlEYXRhXG4gICAgICAgIC5maWx0ZXIoaXRlbSA9PiBpdGVtLnNvbmdzKSAvLyBFbnN1cmUgc29uZyBkYXRhIGV4aXN0c1xuICAgICAgICAubWFwKGl0ZW0gPT4gY29udmVydERhdGFiYXNlU29uZyhpdGVtLnNvbmdzLCB1c2VyTGlrZWRTb25ncy5oYXMoaXRlbS5zb25nX2lkKSkpXG5cbiAgICAgIHNldFJlY2VudGx5UGxheWVkU29uZ3MocmVjZW50U29uZ3MpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHJlY2VudGx5IHBsYXllZCBzb25nczonLCBlcnJvcilcbiAgICAgIHNldFJlY2VudGx5UGxheWVkU29uZ3MoW10pXG4gICAgfVxuICB9XG5cbiAgLy8gRmV0Y2ggdXNlciBwbGF5bGlzdHNcbiAgY29uc3QgZmV0Y2hQbGF5bGlzdHMgPSBhc3luYyAoKSA9PiB7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICBzZXRQbGF5bGlzdHMoW10pXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhOiBwbGF5bGlzdHNEYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3BsYXlsaXN0cycpXG4gICAgICAgIC5zZWxlY3QoYFxuICAgICAgICAgIGlkLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgcGxheWxpc3Rfc29uZ3MgKFxuICAgICAgICAgICAgc29uZ3MgKCopXG4gICAgICAgICAgKVxuICAgICAgICBgKVxuICAgICAgICAuZXEoJ3VzZXJfaWQnLCB1c2VyLmlkKVxuXG4gICAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yXG5cbiAgICAgIGNvbnN0IGNvbnZlcnRlZFBsYXlsaXN0czogUGxheWxpc3RbXSA9IHBsYXlsaXN0c0RhdGE/Lm1hcChwbGF5bGlzdCA9PiB7XG4gICAgICAgIGNvbnN0IHBsYXlsaXN0U29uZ3MgPSBwbGF5bGlzdC5wbGF5bGlzdF9zb25ncz8ubWFwKChwczogYW55KSA9PiBcbiAgICAgICAgICBjb252ZXJ0RGF0YWJhc2VTb25nKHBzLnNvbmdzLCBsaWtlZFNvbmdzLmhhcyhwcy5zb25ncy5maWxlX2lkKSlcbiAgICAgICAgKSB8fCBbXVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaWQ6IHBsYXlsaXN0LmlkLnRvU3RyaW5nKCksXG4gICAgICAgICAgbmFtZTogcGxheWxpc3QubmFtZSxcbiAgICAgICAgICBzb25nQ291bnQ6IHBsYXlsaXN0U29uZ3MubGVuZ3RoLFxuICAgICAgICAgIGltYWdlOiBwbGF5bGlzdFNvbmdzWzBdPy5pbWFnZSB8fCAnaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvMTc2MzA3NS9wZXhlbHMtcGhvdG8tMTc2MzA3NS5qcGVnP2F1dG89Y29tcHJlc3MmY3M9dGlueXNyZ2Imdz0zMDAnLFxuICAgICAgICAgIHNvbmdzOiBwbGF5bGlzdFNvbmdzXG4gICAgICAgIH1cbiAgICAgIH0pIHx8IFtdXG5cbiAgICAgIHNldFBsYXlsaXN0cyhjb252ZXJ0ZWRQbGF5bGlzdHMpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHBsYXlsaXN0czonLCBlcnJvcilcbiAgICB9XG4gIH1cblxuICAvLyBUb2dnbGUgbGlrZSBzb25nXG4gIGNvbnN0IHRvZ2dsZUxpa2UgPSBhc3luYyAoc29uZ0lkOiBzdHJpbmcpID0+IHtcbiAgaWYgKCF1c2VyKSByZXR1cm47XG5cbiAgY29uc3Qgc29uZ0ZpbGVJZCA9IHBhcnNlSW50KHNvbmdJZCk7XG4gIGNvbnN0IGlzQ3VycmVudGx5TGlrZWQgPSBsaWtlZFNvbmdzLmhhcyhzb25nRmlsZUlkKTtcblxuICB0cnkge1xuICAgIGlmIChpc0N1cnJlbnRseUxpa2VkKSB7XG4gICAgICAvLyBSZW1vdmUgZnJvbSBsaWtlZF9zb25nc1xuICAgICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ2xpa2VkX3NvbmdzJylcbiAgICAgICAgLmRlbGV0ZSgpXG4gICAgICAgIC5lcSgndXNlcl9pZCcsIHVzZXIuaWQpXG4gICAgICAgIC5lcSgnc29uZ19pZCcsIHNvbmdGaWxlSWQpO1xuXG4gICAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xuXG4gICAgICAvLyBEZWNyZW1lbnQgbGlrZXNcbiAgICAgIGF3YWl0IHN1cGFiYXNlLnJwYygnZGVjcmVtZW50X3NvbmdfbGlrZXMnLCB7IHNvbmdfZmlsZV9pZDogc29uZ0ZpbGVJZCB9KTtcblxuICAgICAgc2V0TGlrZWRTb25ncyhwcmV2ID0+IHtcbiAgICAgICAgY29uc3QgbmV3U2V0ID0gbmV3IFNldChwcmV2KTtcbiAgICAgICAgbmV3U2V0LmRlbGV0ZShzb25nRmlsZUlkKTtcbiAgICAgICAgcmV0dXJuIG5ld1NldDtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBZGQgdG8gbGlrZWRfc29uZ3NcbiAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdsaWtlZF9zb25ncycpXG4gICAgICAgIC5pbnNlcnQoe1xuICAgICAgICAgIHVzZXJfaWQ6IHVzZXIuaWQsXG4gICAgICAgICAgc29uZ19pZDogc29uZ0ZpbGVJZCxcbiAgICAgICAgfSk7XG5cbiAgICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG5cbiAgICAgIC8vIEluY3JlbWVudCBsaWtlc1xuICAgICAgYXdhaXQgc3VwYWJhc2UucnBjKCdpbmNyZW1lbnRfc29uZ19saWtlcycsIHsgc29uZ19maWxlX2lkOiBzb25nRmlsZUlkIH0pO1xuXG4gICAgICBzZXRMaWtlZFNvbmdzKHByZXYgPT4gbmV3IFNldChwcmV2KS5hZGQoc29uZ0ZpbGVJZCkpO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSBzb25ncyBzdGF0ZVxuICAgIC8vIFVwZGF0ZSBzb25ncyBzdGF0ZVxuc2V0U29uZ3MocHJldlNvbmdzID0+XG4gIHByZXZTb25ncy5tYXAoc29uZyA9PlxuICAgIHNvbmcuaWQgPT09IHNvbmdJZFxuICAgICAgPyB7XG4gICAgICAgICAgLi4uc29uZyxcbiAgICAgICAgICBpc0xpa2VkOiAhaXNDdXJyZW50bHlMaWtlZCxcbiAgICAgICAgICBsaWtlczogc29uZy5saWtlcyArIChpc0N1cnJlbnRseUxpa2VkID8gLTEgOiAxKSxcbiAgICAgICAgfVxuICAgICAgOiBzb25nXG4gIClcbik7XG5cblxuICAgIC8vIFVwZGF0ZSBwbGF5bGlzdHMgc3RhdGVcbiAgICBzZXRQbGF5bGlzdHMocHJldlBsYXlsaXN0cyA9PlxuICAgICAgcHJldlBsYXlsaXN0cy5tYXAocGxheWxpc3QgPT4gKHtcbiAgICAgICAgLi4ucGxheWxpc3QsXG4gICAgICAgIHNvbmdzOiBwbGF5bGlzdC5zb25ncy5tYXAoc29uZyA9PlxuICAgICAgICAgIHNvbmcuaWQgPT09IHNvbmdJZFxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgLi4uc29uZyxcbiAgICAgICAgICAgICAgICBpc0xpa2VkOiAhaXNDdXJyZW50bHlMaWtlZCxcbiAgICAgICAgICAgICAgICBsaWtlczogc29uZy5saWtlcyArIChpc0N1cnJlbnRseUxpa2VkID8gLTEgOiAxKSxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBzb25nXG4gICAgICAgICksXG4gICAgICB9KSlcbiAgICApO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHRvZ2dsaW5nIGxpa2U6JywgZXJyb3IpO1xuICB9XG59O1xuXG5cbiAgLy8gQ3JlYXRlIHBsYXlsaXN0XG4gIGNvbnN0IGNyZWF0ZVBsYXlsaXN0ID0gYXN5bmMgKG5hbWU6IHN0cmluZykgPT4ge1xuICAgIGlmICghdXNlcikgcmV0dXJuXG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3BsYXlsaXN0cycpXG4gICAgICAgIC5pbnNlcnQoe1xuICAgICAgICAgIHVzZXJfaWQ6IHVzZXIuaWQsXG4gICAgICAgICAgbmFtZVxuICAgICAgICB9KVxuICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgLnNpbmdsZSgpXG5cbiAgICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3JcblxuICAgICAgY29uc3QgbmV3UGxheWxpc3Q6IFBsYXlsaXN0ID0ge1xuICAgICAgICBpZDogZGF0YS5pZC50b1N0cmluZygpLFxuICAgICAgICBuYW1lOiBkYXRhLm5hbWUsXG4gICAgICAgIHNvbmdDb3VudDogMCxcbiAgICAgICAgaW1hZ2U6ICdodHRwczovL2ltYWdlcy5wZXhlbHMuY29tL3Bob3Rvcy8xNzYzMDc1L3BleGVscy1waG90by0xNzYzMDc1LmpwZWc/YXV0bz1jb21wcmVzcyZjcz10aW55c3JnYiZ3PTMwMCcsXG4gICAgICAgIHNvbmdzOiBbXVxuICAgICAgfVxuXG4gICAgICBzZXRQbGF5bGlzdHMocHJldiA9PiBbLi4ucHJldiwgbmV3UGxheWxpc3RdKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjcmVhdGluZyBwbGF5bGlzdDonLCBlcnJvcilcbiAgICB9XG4gIH1cblxuICAvLyBEZWxldGUgcGxheWxpc3RcbiAgY29uc3QgZGVsZXRlUGxheWxpc3QgPSBhc3luYyAocGxheWxpc3RJZDogc3RyaW5nKSA9PiB7XG4gICAgaWYgKCF1c2VyKSByZXR1cm5cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgncGxheWxpc3RzJylcbiAgICAgICAgLmRlbGV0ZSgpXG4gICAgICAgIC5lcSgnaWQnLCBwYXJzZUludChwbGF5bGlzdElkKSlcbiAgICAgICAgLmVxKCd1c2VyX2lkJywgdXNlci5pZClcblxuICAgICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvclxuXG4gICAgICBzZXRQbGF5bGlzdHMocHJldiA9PiBwcmV2LmZpbHRlcihwbGF5bGlzdCA9PiBwbGF5bGlzdC5pZCAhPT0gcGxheWxpc3RJZCkpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRlbGV0aW5nIHBsYXlsaXN0OicsIGVycm9yKVxuICAgIH1cbiAgfVxuXG4gIC8vIFJlbmFtZSBwbGF5bGlzdFxuICBjb25zdCByZW5hbWVQbGF5bGlzdCA9IGFzeW5jIChwbGF5bGlzdElkOiBzdHJpbmcsIG5ld05hbWU6IHN0cmluZykgPT4ge1xuICAgIGlmICghdXNlcikgcmV0dXJuXG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3BsYXlsaXN0cycpXG4gICAgICAgIC51cGRhdGUoeyBuYW1lOiBuZXdOYW1lIH0pXG4gICAgICAgIC5lcSgnaWQnLCBwYXJzZUludChwbGF5bGlzdElkKSlcbiAgICAgICAgLmVxKCd1c2VyX2lkJywgdXNlci5pZClcblxuICAgICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvclxuXG4gICAgICBzZXRQbGF5bGlzdHMocHJldiA9PiBcbiAgICAgICAgcHJldi5tYXAocGxheWxpc3QgPT4gXG4gICAgICAgICAgcGxheWxpc3QuaWQgPT09IHBsYXlsaXN0SWQgXG4gICAgICAgICAgICA/IHsgLi4ucGxheWxpc3QsIG5hbWU6IG5ld05hbWUgfVxuICAgICAgICAgICAgOiBwbGF5bGlzdFxuICAgICAgICApXG4gICAgICApXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJlbmFtaW5nIHBsYXlsaXN0OicsIGVycm9yKVxuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBzb25nIHRvIHBsYXlsaXN0XG4gIGNvbnN0IGFkZFNvbmdUb1BsYXlsaXN0ID0gYXN5bmMgKHBsYXlsaXN0SWQ6IHN0cmluZywgc29uZzogU29uZykgPT4ge1xuICAgIGlmICghdXNlcikgcmV0dXJuXG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3BsYXlsaXN0X3NvbmdzJylcbiAgICAgICAgLmluc2VydCh7XG4gICAgICAgICAgcGxheWxpc3RfaWQ6IHBhcnNlSW50KHBsYXlsaXN0SWQpLFxuICAgICAgICAgIHNvbmdfaWQ6IHNvbmcuZmlsZV9pZFxuICAgICAgICB9KVxuXG4gICAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yXG5cbiAgICAgIHNldFBsYXlsaXN0cyhwcmV2ID0+IFxuICAgICAgICBwcmV2Lm1hcChwbGF5bGlzdCA9PiB7XG4gICAgICAgICAgaWYgKHBsYXlsaXN0LmlkID09PSBwbGF5bGlzdElkKSB7XG4gICAgICAgICAgICBjb25zdCBzb25nRXhpc3RzID0gcGxheWxpc3Quc29uZ3Muc29tZShzID0+IHMuaWQgPT09IHNvbmcuaWQpXG4gICAgICAgICAgICBpZiAoIXNvbmdFeGlzdHMpIHtcbiAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZFNvbmdzID0gWy4uLnBsYXlsaXN0LnNvbmdzLCBzb25nXVxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnBsYXlsaXN0LFxuICAgICAgICAgICAgICAgIHNvbmdzOiB1cGRhdGVkU29uZ3MsXG4gICAgICAgICAgICAgICAgc29uZ0NvdW50OiB1cGRhdGVkU29uZ3MubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGltYWdlOiB1cGRhdGVkU29uZ3NbMF0/LmltYWdlIHx8IHBsYXlsaXN0LmltYWdlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHBsYXlsaXN0XG4gICAgICAgIH0pXG4gICAgICApXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFkZGluZyBzb25nIHRvIHBsYXlsaXN0OicsIGVycm9yKVxuICAgIH1cbiAgfVxuXG4gIC8vIFJlbW92ZSBzb25nIGZyb20gcGxheWxpc3RcbiAgY29uc3QgcmVtb3ZlU29uZ0Zyb21QbGF5bGlzdCA9IGFzeW5jIChwbGF5bGlzdElkOiBzdHJpbmcsIHNvbmdJZDogc3RyaW5nKSA9PiB7XG4gICAgaWYgKCF1c2VyKSByZXR1cm5cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgncGxheWxpc3Rfc29uZ3MnKVxuICAgICAgICAuZGVsZXRlKClcbiAgICAgICAgLmVxKCdwbGF5bGlzdF9pZCcsIHBhcnNlSW50KHBsYXlsaXN0SWQpKVxuICAgICAgICAuZXEoJ3NvbmdfaWQnLCBwYXJzZUludChzb25nSWQpKVxuXG4gICAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yXG5cbiAgICAgIHNldFBsYXlsaXN0cyhwcmV2ID0+IFxuICAgICAgICBwcmV2Lm1hcChwbGF5bGlzdCA9PiB7XG4gICAgICAgICAgaWYgKHBsYXlsaXN0LmlkID09PSBwbGF5bGlzdElkKSB7XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkU29uZ3MgPSBwbGF5bGlzdC5zb25ncy5maWx0ZXIoc29uZyA9PiBzb25nLmlkICE9PSBzb25nSWQpXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAuLi5wbGF5bGlzdCxcbiAgICAgICAgICAgICAgc29uZ3M6IHVwZGF0ZWRTb25ncyxcbiAgICAgICAgICAgICAgc29uZ0NvdW50OiB1cGRhdGVkU29uZ3MubGVuZ3RoLFxuICAgICAgICAgICAgICBpbWFnZTogdXBkYXRlZFNvbmdzWzBdPy5pbWFnZSB8fCAnaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvMTc2MzA3NS9wZXhlbHMtcGhvdG8tMTc2MzA3NS5qcGVnP2F1dG89Y29tcHJlc3MmY3M9dGlueXNyZ2Imdz0zMDAnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBwbGF5bGlzdFxuICAgICAgICB9KVxuICAgICAgKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciByZW1vdmluZyBzb25nIGZyb20gcGxheWxpc3Q6JywgZXJyb3IpXG4gICAgfVxuICB9XG5cbiAgLy8gVXBkYXRlIGxhc3Qgc29uZyBpbiB1c2VyIHByb2ZpbGVcbiAgY29uc3QgdXBkYXRlTGFzdFNvbmcgPSBhc3luYyAoc29uZ0lkOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoIXVzZXIpIHJldHVyblxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCd1c2VycycpXG4gICAgICAgIC51cGRhdGUoeyBsYXN0X3NvbmdfZmlsZV9pZDogcGFyc2VJbnQoc29uZ0lkKSB9KVxuICAgICAgICAuZXEoJ2lkJywgdXNlci5pZClcblxuICAgICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGRhdGluZyBsYXN0IHNvbmc6JywgZXJyb3IpXG4gICAgfVxuICB9XG5cbiAgLy8gUmVjb3JkIGxpc3RlbmluZyBoaXN0b3J5IHdpdGggcHJvcGVyIHRpbWUgdHJhY2tpbmdcbiAgY29uc3QgcmVjb3JkTGlzdGVuaW5nSGlzdG9yeSA9IGFzeW5jIChzb25nSWQ6IHN0cmluZykgPT4ge1xuICAgIGlmICghdXNlcikgcmV0dXJuXG5cbiAgICAvLyBJZiB0aGVyZSdzIGEgcHJldmlvdXMgc29uZyBwbGF5aW5nLCByZWNvcmQgaXRzIGxpc3RlbmluZyB0aW1lXG4gICAgICBpZiAoY3VycmVudFNvbmdSZWYuY3VycmVudCAmJiBjdXJyZW50U29uZ1N0YXJ0VGltZSkge1xuICAgIGNvbnN0IGVuZFRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IG1pbnV0ZXNMaXN0ZW5lZCA9IChlbmRUaW1lLmdldFRpbWUoKSAtIGN1cnJlbnRTb25nU3RhcnRUaW1lLmdldFRpbWUoKSkgLyAoMTAwMCAqIDYwKTtcblxuICAgIGlmIChtaW51dGVzTGlzdGVuZWQgPiAwLjEpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLnJvdW5kKG1pbnV0ZXNMaXN0ZW5lZCAqIDEwMCkgLyAxMDA7XG4gICAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLnJwYygndXBzZXJ0X2hpc3RvcnlfbWludXRlcycsIHtcbiAgICAgICAgICB1c2VyX3V1aWQ6IHVzZXIuaWQsXG4gICAgICAgICAgc29uZ19maWxlX2lkOiBwYXJzZUludChjdXJyZW50U29uZ1JlZi5jdXJyZW50KSxcbiAgICAgICAgICBtaW51dGVzOiBtaW51dGVzLFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgcmVjb3JkaW5nIHNvbmcgaGlzdG9yeTonLCBlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYOKchSBIaXN0b3J5IHVwZGF0ZWQ6ICske21pbnV0ZXN9IG1pbnMgZm9yIHNvbmcgJHtjdXJyZW50U29uZ1JlZi5jdXJyZW50fWApO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciByZWNvcmRpbmcgcHJldmlvdXMgc29uZyBoaXN0b3J5OicsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuXG4gICAgLy8gU2V0IG5ldyBzb25nIGFzIGN1cnJlbnRcbiAgICBjdXJyZW50U29uZ1JlZi5jdXJyZW50ID0gc29uZ0lkXG4gICAgc2V0Q3VycmVudFNvbmdTdGFydFRpbWUobmV3IERhdGUoKSlcbiAgICBcbiAgICAvLyBVcGRhdGUgbGFzdCBzb25nIGluIHVzZXIgcHJvZmlsZVxuICAgIGF3YWl0IHVwZGF0ZUxhc3RTb25nKHNvbmdJZClcbnRyeSB7XG4gIGF3YWl0IHN1cGFiYXNlLnJwYygnaW5jcmVtZW50X3Nvbmdfdmlld3MnLCB7IHNvbmdfZmlsZV9pZDogcGFyc2VJbnQoc29uZ0lkKSB9KTtcbn0gY2F0Y2ggKGVycm9yKSB7XG4gIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluY3JlbWVudGluZyBzb25nIHZpZXdzOicsIGVycm9yKTtcbn1cblxuICB9XG5cbiAgLy8gU3RvcCBjdXJyZW50IHNvbmcgdHJhY2tpbmcgKHdoZW4gcGxheWVyIGlzIGNsb3NlZClcbiAgY29uc3Qgc3RvcEN1cnJlbnRTb25nVHJhY2tpbmcgPSBhc3luYyAoKSA9PiB7XG4gICAgaWYgKGN1cnJlbnRTb25nUmVmLmN1cnJlbnQgJiYgY3VycmVudFNvbmdTdGFydFRpbWUgJiYgdXNlcikge1xuICAgICAgY29uc3QgZW5kVGltZSA9IG5ldyBEYXRlKClcbiAgICAgIGNvbnN0IG1pbnV0ZXNMaXN0ZW5lZCA9IChlbmRUaW1lLmdldFRpbWUoKSAtIGN1cnJlbnRTb25nU3RhcnRUaW1lLmdldFRpbWUoKSkgLyAoMTAwMCAqIDYwKVxuICAgICAgXG4gICAgICBpZiAobWludXRlc0xpc3RlbmVkID4gMC4xKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgbWludXRlcyA9IE1hdGgucm91bmQobWludXRlc0xpc3RlbmVkICogMTAwKSAvIDEwMDtcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5ycGMoJ3Vwc2VydF9oaXN0b3J5X21pbnV0ZXMnLCB7XG4gICAgICB1c2VyX3V1aWQ6IHVzZXIuaWQsXG4gICAgICBzb25nX2ZpbGVfaWQ6IHBhcnNlSW50KGN1cnJlbnRTb25nUmVmLmN1cnJlbnQpLFxuICAgICAgbWludXRlczogbWludXRlcyxcbiAgICB9KTtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIHJlY29yZGluZyBzb25nIGhpc3Rvcnkgb24gc3RvcDonLCBlcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKGDwn5uRIEhpc3RvcnkgdXBkYXRlZCBvbiBzdG9wOiArJHttaW51dGVzfSBtaW5zIGZvciBzb25nICR7Y3VycmVudFNvbmdSZWYuY3VycmVudH1gKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVjb3JkaW5nIGZpbmFsIHNvbmcgaGlzdG9yeTonLCBlcnJvcik7XG4gIH1cbn1cblxuICAgIH1cblxuICAgIGN1cnJlbnRTb25nUmVmLmN1cnJlbnQgPSBudWxsXG4gICAgc2V0Q3VycmVudFNvbmdTdGFydFRpbWUobnVsbClcbiAgfVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgbG9hZERhdGEgPSBhc3luYyAoKSA9PiB7XG4gICAgICBpZiAoIXVzZXIpIHtcbiAgICAgICAgLy8gUmVzZXQgZGF0YSB3aGVuIHVzZXIgbG9ncyBvdXRcbiAgICAgICAgc2V0U29uZ3MoW10pXG4gICAgICAgIHNldFBsYXlsaXN0cyhbXSlcbiAgICAgICAgc2V0TGlrZWRTb25ncyhuZXcgU2V0KCkpXG4gICAgICAgIHNldExhc3RQbGF5ZWRTb25nKG51bGwpXG4gICAgICAgIHNldExvYWRpbmcoZmFsc2UpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBzZXRMb2FkaW5nKHRydWUpXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtmZXRjaFNvbmdzKCksIGZldGNoUGxheWxpc3RzKCksIGZldGNoUmVjZW50bHlQbGF5ZWQoKSwgZmV0Y2hQZXJzb25hbGl6ZWRTb25ncygpXSlcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgZGF0YTonLCBlcnJvcilcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHNldExvYWRpbmcoZmFsc2UpXG4gICAgICB9XG4gICAgfVxuXG4gICAgbG9hZERhdGEoKVxuICB9LCBbdXNlcl0pXG5cbiAgcmV0dXJuIHtcbiAgICBzb25ncyxcbiAgICBwZXJzb25hbGl6ZWRTb25ncyxcbiAgICBwbGF5bGlzdHMsXG4gICAgbGlrZWRTb25nczogc29uZ3MuZmlsdGVyKHNvbmcgPT4gc29uZy5pc0xpa2VkKSxcbiAgICByZWNlbnRseVBsYXllZFNvbmdzLFxuICAgIGxhc3RQbGF5ZWRTb25nLFxuICAgIGxvYWRpbmcsXG4gICAgdG9nZ2xlTGlrZSxcbiAgICBjcmVhdGVQbGF5bGlzdCxcbiAgICBkZWxldGVQbGF5bGlzdCxcbiAgICByZW5hbWVQbGF5bGlzdCxcbiAgICBhZGRTb25nVG9QbGF5bGlzdCxcbiAgICByZW1vdmVTb25nRnJvbVBsYXlsaXN0LFxuICAgIHJlY29yZExpc3RlbmluZ0hpc3RvcnksXG4gICAgc3RvcEN1cnJlbnRTb25nVHJhY2tpbmcsXG4gICAgcmVmcmVzaERhdGE6ICgpID0+IHtcbiAgICAgIGZldGNoU29uZ3MoKVxuICAgICAgZmV0Y2hQbGF5bGlzdHMoKVxuICAgICAgZmV0Y2hSZWNlbnRseVBsYXllZCgpXG4gICAgICBmZXRjaFBlcnNvbmFsaXplZFNvbmdzKClcbiAgICB9LFxuICAgIGdldFBlcnNvbmFsaXplZFNvbmdzLFxuICAgIGdldFNtYXJ0UGVyc29uYWxpemVkU29uZ3NcbiAgfVxufSJdLCJuYW1lcyI6WyJzdXBhYmFzZSIsInVzZUVmZmVjdCIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlU3VwYWJhc2VEYXRhIiwidXNlciIsInNvbmdzIiwic2V0U29uZ3MiLCJwbGF5bGlzdHMiLCJzZXRQbGF5bGlzdHMiLCJsaWtlZFNvbmdzIiwic2V0TGlrZWRTb25ncyIsIlNldCIsImxhc3RQbGF5ZWRTb25nIiwic2V0TGFzdFBsYXllZFNvbmciLCJyZWNlbnRseVBsYXllZFNvbmdzIiwic2V0UmVjZW50bHlQbGF5ZWRTb25ncyIsInBlcnNvbmFsaXplZFNvbmdzIiwic2V0UGVyc29uYWxpemVkU29uZ3MiLCJsb2FkaW5nIiwic2V0TG9hZGluZyIsImN1cnJlbnRTb25nU3RhcnRUaW1lIiwic2V0Q3VycmVudFNvbmdTdGFydFRpbWUiLCJjdXJyZW50U29uZ1JlZiIsImdldFNtYXJ0UGVyc29uYWxpemVkU29uZ3MiLCJ1c2VySWQiLCJsaXN0ZW5lZFNvbmdzSW5CYXRjaCIsImV4Y2x1ZGVTb25ncyIsImNvbnNvbGUiLCJsb2ciLCJtYXAiLCJzIiwibmFtZSIsImxlbmd0aCIsInByZWZlcnJlZFRhZ3MiLCJwcmVmZXJyZWRBcnRpc3RzIiwiZm9yRWFjaCIsInNvbmciLCJ0YWdzIiwidGFnIiwiYWRkIiwidG9Mb3dlckNhc2UiLCJhcnRpc3QiLCJBcnJheSIsImZyb20iLCJkYXRhIiwic29uZ3NEYXRhIiwiZXJyb3IiLCJzb25nc0Vycm9yIiwic2VsZWN0Iiwid2FybiIsImxpa2VkRGF0YSIsImVxIiwidXNlckxpa2VkU29uZ3MiLCJpdGVtIiwic29uZ19pZCIsImF2YWlsYWJsZVNvbmdzIiwiZmlsdGVyIiwiaGFzIiwiZmlsZV9pZCIsInRvU3RyaW5nIiwic2NvcmVkU29uZ3MiLCJzY29yZSIsInNvbmdUYWdzIiwibWF0Y2hpbmdUYWdzIiwibGlzdGVuZWRMYW5ndWFnZXMiLCJsYW5ndWFnZSIsImluY2x1ZGVzIiwiTWF0aCIsImxpa2VzIiwidmlld3MiLCJyYW5kb20iLCJjb252ZXJ0RGF0YWJhc2VTb25nIiwicmVjb21tZW5kYXRpb25zIiwic29ydCIsImEiLCJiIiwic2xpY2UiLCJlbnRyeSIsImRiU29uZyIsImlzTGlrZWQiLCJpbWdfaWQiLCJpZCIsImltYWdlIiwiZmV0Y2hTb25ncyIsIm9yZGVyIiwiYXNjZW5kaW5nIiwiY29udmVydGVkU29uZ3MiLCJzb3J0ZWRTb25ncyIsImFTY29yZSIsImJTY29yZSIsInVzZXJEYXRhIiwic2luZ2xlIiwibGFzdF9zb25nX2ZpbGVfaWQiLCJsYXN0U29uZyIsImZpbmQiLCJnZXRQZXJzb25hbGl6ZWRTb25ncyIsImN1cnJlbnRTb25nIiwibGlzdGVuZWRTb25ncyIsInNpemUiLCJoaXN0b3J5RGF0YSIsImhpc3RvcnlFcnJvciIsImhpc3RvcnlNYXAiLCJNYXAiLCJoIiwic2V0IiwibWludXRlc19saXN0ZW5lZCIsImxpc3RlbmVkTWludXRlcyIsImdldCIsIm1pbiIsImZldGNoUGVyc29uYWxpemVkU29uZ3MiLCJsaW1pdCIsInRyZW5kaW5nU29uZ3MiLCJjb252ZXJ0ZWQiLCJ0b3BTb25ncyIsInRhZ0NvdW50cyIsImFydGlzdENvdW50cyIsImhpc3RvcnlTb25nSWRzIiwiaXNBcnJheSIsIm5vcm1hbGl6ZWRUYWciLCJ0cmltIiwibm9ybWFsaXplZEFydGlzdCIsImNvbW1vblRhZ3MiLCJlbnRyaWVzIiwiY29tbW9uQXJ0aXN0cyIsImFsbFNvbmdzIiwic29uZ0FydGlzdCIsImZldGNoUmVjZW50bHlQbGF5ZWQiLCJyZWNlbnRTb25ncyIsImZldGNoUGxheWxpc3RzIiwicGxheWxpc3RzRGF0YSIsImNvbnZlcnRlZFBsYXlsaXN0cyIsInBsYXlsaXN0IiwicGxheWxpc3RTb25ncyIsInBsYXlsaXN0X3NvbmdzIiwicHMiLCJzb25nQ291bnQiLCJ0b2dnbGVMaWtlIiwic29uZ0lkIiwic29uZ0ZpbGVJZCIsInBhcnNlSW50IiwiaXNDdXJyZW50bHlMaWtlZCIsImRlbGV0ZSIsInJwYyIsInNvbmdfZmlsZV9pZCIsInByZXYiLCJuZXdTZXQiLCJpbnNlcnQiLCJ1c2VyX2lkIiwicHJldlNvbmdzIiwicHJldlBsYXlsaXN0cyIsImNyZWF0ZVBsYXlsaXN0IiwibmV3UGxheWxpc3QiLCJkZWxldGVQbGF5bGlzdCIsInBsYXlsaXN0SWQiLCJyZW5hbWVQbGF5bGlzdCIsIm5ld05hbWUiLCJ1cGRhdGUiLCJhZGRTb25nVG9QbGF5bGlzdCIsInBsYXlsaXN0X2lkIiwic29uZ0V4aXN0cyIsInNvbWUiLCJ1cGRhdGVkU29uZ3MiLCJyZW1vdmVTb25nRnJvbVBsYXlsaXN0IiwidXBkYXRlTGFzdFNvbmciLCJyZWNvcmRMaXN0ZW5pbmdIaXN0b3J5IiwiY3VycmVudCIsImVuZFRpbWUiLCJEYXRlIiwibWludXRlc0xpc3RlbmVkIiwiZ2V0VGltZSIsIm1pbnV0ZXMiLCJyb3VuZCIsInVzZXJfdXVpZCIsInN0b3BDdXJyZW50U29uZ1RyYWNraW5nIiwibG9hZERhdGEiLCJQcm9taXNlIiwiYWxsIiwicmVmcmVzaERhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useSupabaseData.ts\n"));

/***/ })

});